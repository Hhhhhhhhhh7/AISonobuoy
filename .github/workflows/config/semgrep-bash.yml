rules:
- id: curl-pipe-bash
  languages:
  - bash
  message: Data is being piped into `bash` from a `curl` command. An attacker with
    control of the server in the `curl` command could inject malicious code into the
    pipe, resulting in a system comrpomise. Avoid piping untrusted data into `bash`
    or any other shell if you can. If you must do this, consider checking the SHA
    sum of the content returned by the server to verify its integrity.
  metadata:
    category: security
    confidence: MEDIUM
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    - A01:2017 - Injection
    technology:
    - bash
    - curl
  patterns:
  - pattern-either:
    - pattern: curl ... | bash ...
    - pattern: curl ... | /bin/bash ...
    - pattern: bash <(curl ...)
    - pattern: /bin/bash <(curl ...)
  severity: WARNING
- id: curl-eval
  languages:
  - bash
  message: Data is being eval'd from a `curl` command. An attacker with control of
    the server in the `curl` command could inject malicious code into the `eval`,
    resulting in a system comrpomise. Avoid eval'ing untrusted data if you can. If
    you must do this, consider checking the SHA sum of the content returned by the
    server to verify its integrity.
  metadata:
    category: security
    confidence: MEDIUM
    cwe: 'CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
      (''Eval Injection'')'
    owasp:
    - A03:2021 - Injection
    - A01:2017 - Injection
    technology:
    - bash
    - curl
  mode: taint
  pattern-sinks:
  - pattern: eval ...
  pattern-sources:
  - pattern: '$(curl ...)

      '
  - pattern: '`curl ...`

      '
  severity: WARNING
- id: iteration-over-ls-output
  languages:
  - bash
  message: Iterating over ls output is fragile. Use globs, e.g. 'dir/*' instead of
    '$(ls dir)'.
  metadata:
    category: best-practice
    references:
    - https://github.com/koalaman/shellcheck/wiki/SC2045
    technology:
    - bash
  pattern: "for $VAR in $(ls ...); do\n  ...\ndone\n"
  severity: WARNING
- id: useless-cat
  languages:
  - bash
  message: Useless call to 'cat' in a pipeline. Use '<' and '>' for any command to
    read from a file or write to a file.
  metadata:
    category: best-practice
    references:
    - https://github.com/koalaman/shellcheck/wiki/SC2002
    technology:
    - bash
  pattern-either:
  - pattern: 'cat | ...

      '
  - patterns:
    - pattern: 'cat $ARG | ...

        '
    - pattern-not: 'cat ${$SEVERAL_FILES} | ...

        '
  - pattern: '... | cat

      '
  - pattern: '... | cat | ...

      '
  severity: WARNING
- id: ifs-tampering
  languages:
  - bash
  message: The special variable IFS affects how splitting takes place when expanding
    unquoted variables. Don't set it globally. Prefer a dedicated utility such as
    'cut' or 'awk' if you need to split input data. If you must use 'read', set IFS
    locally using e.g. 'IFS="," read -a my_array'.
  metadata:
    category: security
    confidence: MEDIUM
    technology:
    - bash
  pattern: IFS=...
  severity: WARNING
- id: unquoted-variable-expansion-in-command
  languages:
  - bash
  message: Variable expansions must be double-quoted so as to prevent being split
    into multiple pieces according to whitespace or whichever separator is specified
    by the IFS variable. If you really wish to split the variable's contents, you
    may use a variable that starts with an underscore e.g. $_X instead of $X, and
    semgrep will ignore it. If what you need is an array, consider using a proper
    bash array.
  metadata:
    category: correctness
    technology:
    - bash
  patterns:
  - pattern-either:
    - pattern: '... ${$VAR} ...

        '
    - pattern: '... ...${$VAR}... ...

        '
  - metavariable-regex:
      metavariable: $VAR
      regex: '[*@0-9]|[A-Za-z].*'
  severity: WARNING
- id: unquoted-command-substitution-in-command
  languages:
  - bash
  message: The result of command substitution $(...) or `...`, if unquoted, is split
    on whitespace or other separators specified by the IFS variable. You should surround
    it with double quotes to avoid splitting the result.
  metadata:
    category: correctness
    technology:
    - bash
  patterns:
  - pattern-either:
    - pattern: '... $(...) ...

        '
    - pattern: '... ...$(...)... ...

        '
  severity: WARNING
