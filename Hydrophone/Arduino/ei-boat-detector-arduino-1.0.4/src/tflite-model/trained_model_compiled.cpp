/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 10.04.2021 13:54:35

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 26688;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[56];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,12900 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 224, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[16] = { -127, 21, 0, -121, -35, 43, 37, 1, -84, -34, 23, -108, 37, 37, -28, -45, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<1, float> quant2_scale = { 1, { 0.00084188400069251657, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[2] = { -12, 12, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0014309682883322239, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int8_t tensor_data4[16] = { -41, -15, 10, 30, -77, -127, -5, -9, 15, 12, 7, -23, -48, 22, 1, -17, };
const TfArray<1, int> tensor_dimension4 = { 1, { 16 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0026387893594801426, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[16] = { -41, -45, -124, 76, -43, -34, -25, -31, -127, -96, -8, -84, 71, -81, -1, -30, };
const TfArray<1, int> tensor_dimension5 = { 1, { 16 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0015948356594890356, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[32] = { 61, -28, 64, -5, -127, -15, -29, -35, -35, -23, -113, -38, -18, -14, -51, -21, -77, -40, -15, 5, -19, -35, -56, -29, -57, -106, -65, 12, -4, -16, -24, -18, };
const TfArray<1, int> tensor_dimension6 = { 1, { 32 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0032020700164139271, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[64] = { -185, -60, 190, 19, -71, -95, -24, -5, 62, 223, -79, 90, 3, 206, -27, -18, 272, -56, -38, -38, 161, -93, -54, 162, 165, -156, 191, -32, 35, -24, -21, -72, -22, -5, 358, -42, -4, -97, -11, -183, 3, -69, 63, 34, -23, -89, 20, -69, -32, -52, -30, -7, 150, -30, 12, -28, 115, -36, -34, -21, 299, 33, -8, -34, };
const TfArray<1, int> tensor_dimension7 = { 1, { 64 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0014878504443913698, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[64*224] = { 
  20, 2, 7, -12, -9, -20, 50, -11, 9, -10, -24, -28, -17, -32, 12, 18, 6, -15, -25, -22, -33, -20, 8, 5, 16, 6, -5, 41, -20, 5, -22, -19, 20, -12, -28, -2, 21, -26, 13, -13, -1, 5, -9, -14, -5, -13, 0, -21, 0, -2, -35, -12, 2, -5, 4, -5, 10, -13, -7, 4, -13, 5, -10, -3, 19, -2, 44, -7, -5, -27, 8, -5, 7, -24, -8, -14, -25, -5, -3, 15, -10, -4, -28, -9, 7, -16, 3, 2, 40, 5, -3, 25, 1, 3, -14, -17, -23, -4, -5, -17, -15, 9, -24, 7, -14, -29, 7, -19, -46, -17, 5, -3, -10, 1, -7, 19, -2, -9, -17, 1, 22, 15, -6, 18, 7, 6, 8, 0, -10, -1, 33, 2, 11, -30, -26, 5, 1, -28, 3, -33, -25, 10, 1, -17, -7, -10, -19, 9, 12, -20, -9, 6, 13, 2, -9, -5, -14, 9, -17, -19, 45, -10, -2, -27, -7, -38, 13, -6, 0, -7, -8, -7, -27, -5, -13, -21, 6, -6, -14, -35, -23, -24, -11, 6, 4, -7, -9, 37, -11, -8, -29, 13, -11, -15, 74, 21, -10, -10, -21, -4, -15, 14, 4, -2, -39, -5, -7, -1, -12, -5, 12, -21, -12, 29, 9, 3, -3, -1, 2, 9, 11, -3, 7, 1, 
  -14, 4, 0, 1, -13, -7, -9, 0, -7, -12, 6, 3, -7, -1, -17, 3, -7, -8, -7, -5, -3, -8, -5, -4, -3, -4, 0, -4, 1, 5, -1, -15, 7, -1, 4, -10, -8, -10, -3, -5, -9, -8, 4, -9, -2, 5, -1, -2, 1, -4, -5, -11, -14, 1, -3, 5, -7, 1, 2, -17, -5, -8, -12, -8, 0, -5, 2, -14, 3, 3, -3, -2, 1, 5, -11, -2, -6, -1, 2, 0, -11, -3, -15, 2, -1, -12, 7, 12, -7, 6, 5, 0, -6, -1, -15, -18, -10, -2, -4, 4, 3, -6, 2, -3, -6, -10, -11, -8, -11, 0, -1, -10, 8, -2, -2, -10, -15, -3, -1, 4, -15, 9, 0, 7, 0, 7, -16, -22, -15, -8, 9, -1, -4, -3, 2, -12, -6, -4, 4, -8, -15, -2, -15, 9, -6, -12, 4, -2, -10, -5, 8, -7, -11, 10, -12, 3, -11, -11, -2, -4, -5, -2, 8, -1, 4, -13, 8, 6, 5, -12, 0, -3, -5, -13, 6, -1, 2, -3, 4, -13, -6, -1, -7, 3, -8, 7, -10, -12, 4, 7, 0, -14, -12, -9, 0, -6, -5, 6, -3, -10, -3, -12, 3, -5, -4, -11, -4, -9, 6, 2, -9, -17, -2, -11, 15, -9, 5, -3, -1, -5, -4, -8, 4, 8, 
  23, 26, 17, -34, 17, -19, -35, 21, -6, -2, 26, -26, 0, 0, -3, -3, -23, 8, 11, -21, 16, -18, -1, -1, 2, -10, -11, 18, 11, -5, -34, -16, 13, 29, 5, -12, 0, -54, -28, -15, 5, -8, -17, -53, -22, -8, 17, -41, 31, 1, -40, -34, -40, -50, -8, -10, 14, -14, -5, -7, 8, -10, -34, -23, -11, -31, -2, -4, 12, -19, -33, -3, -28, -41, -4, -14, -46, -18, -21, -26, 10, 18, -36, 11, 11, -26, 23, -2, -22, 4, -18, -23, 5, -6, -33, -33, 6, -10, 28, 7, -14, -25, 15, -6, 1, 64, -29, 4, -4, 10, 2, -3, -2, 2, -25, 14, -3, -1, 4, 1, -13, -19, -4, -9, 9, -6, -39, -8, 18, 23, 22, -2, -11, -16, 4, 14, 4, 5, -22, 8, 13, -24, -41, -13, 2, -18, -3, 4, -17, 8, -13, -1, 2, -10, -19, -8, -7, -4, 10, -8, -11, -6, 9, 10, 49, -2, -30, 2, 6, -6, -3, -12, -9, -17, -37, -29, -2, 1, -13, 5, 19, -19, 9, 5, -3, -14, -4, -11, -8, 23, -39, 6, -15, -30, 14, -4, -14, 7, 50, -6, -3, 7, -12, 0, 8, -34, 12, -1, -5, -9, -3, 7, -16, -31, 26, -3, -18, 11, 2, -21, -13, -7, 21, 30, 
  -14, 9, -9, 10, -2, 5, 1, -4, 5, 2, -8, -13, -4, -2, -1, -3, 1, -5, 5, -3, -3, -5, 0, -8, -6, -10, 2, 5, 8, 3, -5, -6, 6, -7, -2, -5, 3, 5, 0, -6, -10, 2, -17, -3, -1, 2, 6, 9, -12, 4, -6, 5, 3, 6, -7, 8, 7, 2, -2, 31, -9, -7, -1, 2, 2, 1, -6, -9, -6, -14, -9, 5, 5, -4, -3, 6, -1, -3, -5, -3, -10, 7, -7, -15, -8, 4, 15, 10, 4, 3, 0, 19, 2, -2, 0, -13, -16, 6, -5, 3, -3, 1, 0, 13, 18, -9, -11, -6, 4, -4, 7, -1, -5, 6, -3, -1, -9, -3, 2, 4, -2, -13, -9, 4, 5, -8, -1, 7, -21, 2, -30, -9, -4, -1, 2, 8, -4, 9, -5, -7, -4, 9, 3, 8, -2, 4, -10, -9, -6, -4, 1, 1, -2, 8, 6, 12, 9, 3, -6, 2, 0, -2, -12, -1, -10, 7, -3, -1, -4, 0, -6, -10, 10, -5, -5, 11, -3, -4, 9, -1, 5, 10, 0, 6, 0, -11, 1, -10, 5, -3, -5, 5, 0, 0, 14, -5, -1, -6, 5, -13, 19, 4, -20, 5, -12, 0, 4, 18, -10, 8, 3, -16, -6, -4, -6, 9, 9, 8, -6, 25, 5, -6, -11, -10, 
  -6, -32, 12, 6, -20, 3, 2, -10, -5, 1, -2, -11, -20, -4, -34, -3, 0, 6, -7, 11, -10, -15, 3, 3, -8, 13, -26, -25, 5, -6, -5, -14, -23, -4, -12, -18, -6, -9, 13, 5, -9, 28, 8, -5, 9, -7, -12, -10, -3, 3, -25, 7, 0, 7, -11, -8, -19, 21, -12, -2, -5, -7, -9, 3, -9, -19, -25, 9, -49, -2, 9, -9, 18, 14, 16, -4, 9, 4, -32, -3, -5, 6, -2, -5, 8, -8, -8, -13, -15, -8, -38, 10, -5, 3, 10, 19, -17, 9, -15, -1, -56, -11, 12, 0, 7, -6, 25, 4, -1, -12, -3, -24, -8, 5, 7, 5, -8, 10, -1, 5, 7, 26, -49, -23, -8, -6, 13, 14, -2, 17, 0, 1, -33, -7, -12, -9, 20, 12, 12, -16, 2, 0, -14, 7, 4, -5, -11, -1, 0, -10, -4, -2, -19, 21, 11, -21, 30, 6, -10, 14, -2, 19, -12, -8, -12, -1, 7, -10, 10, -12, -9, -14, 0, -10, 7, -1, -1, 5, -12, 17, -12, 7, -7, -5, -2, -4, -13, 13, -1, -2, 7, -2, 4, -12, 18, 4, -9, -21, -8, -12, -11, 8, -6, -4, -9, 12, -6, -17, -6, -8, -4, 17, -9, -13, -9, 1, -9, 3, -5, 32, 4, -10, 3, -3, 
  -20, -23, -12, -7, 9, 6, -13, -10, -9, 7, -12, -8, 1, -7, -14, -2, -7, -8, -10, 7, 16, 6, 25, -4, 3, -11, -2, -1, -14, -17, 6, -1, -20, 0, -5, -18, -8, -11, -7, -14, 8, 3, -8, 3, 0, -12, 0, -11, -11, 2, -4, -8, 10, -2, -2, 7, 2, -3, 11, -3, -19, 14, -2, -2, -2, 10, 13, -15, 18, -8, 7, 14, -11, -12, -11, -7, -10, -1, -5, -10, -15, 12, -10, -3, 7, -2, 21, 0, -4, 13, -7, -11, 3, -2, -12, 3, -7, -6, 6, -9, 5, -14, 10, -19, 0, -7, -18, -9, -8, 2, 5, 4, 16, 0, -6, 8, 10, -8, 0, -1, -12, -18, -5, 14, -5, -4, -6, 16, -7, 19, -17, -9, 22, -4, 35, 8, -45, 6, -14, -2, -1, -7, -18, 0, 27, 9, -4, -4, 1, 1, 9, -11, -7, -15, -10, -9, -4, 2, -1, 12, -11, 2, -3, -3, 6, -1, -1, -9, -14, 2, 1, -9, -12, -3, -10, -21, 0, 4, 1, 6, 0, -13, 12, -3, -5, -16, -2, -1, -9, 17, 6, -16, -6, -1, -5, 12, 8, -3, -1, -10, 15, -6, -4, -1, -8, 2, 8, 5, 2, -3, -9, -20, -2, -3, 6, -10, -8, 8, -6, -10, 16, -6, 20, 7, 
  -22, -1, 29, 0, 6, -5, 1, 5, 4, 6, -52, -1, -7, -9, -5, -5, 7, 0, 5, -3, -9, 7, 7, -3, -6, 5, -5, -8, -8, 6, -1, -6, -13, 6, -26, 21, 19, 8, -6, 13, 4, -3, -2, 4, 6, -5, -7, -2, -6, 8, -9, 8, 5, -3, -10, 6, -10, 0, -1, -20, -7, 3, -1, -3, -12, -1, -1, -3, 1, -1, 4, 10, 20, 6, -4, -8, 10, -5, 0, -11, -6, 8, -6, 0, -1, -12, -1, -4, -12, 6, -6, -6, 9, -8, -9, -9, -12, 5, -6, 1, -3, -6, -2, 9, 1, 1, -9, -3, -6, 0, 10, 7, 3, -4, -8, 4, -4, 5, 1, -4, -9, 6, 3, -12, -2, 4, -3, -9, 3, -6, -8, 16, -6, -1, 5, -8, -6, 1, 0, -12, -9, -3, -6, 7, -1, -2, -3, 1, -5, -1, -8, -10, -6, 11, 4, -10, 4, -8, -7, -8, -21, -9, -24, 4, -3, -10, -7, 6, -5, -8, -32, 4, -7, -2, -9, -3, 5, 7, 3, -15, -5, 2, 3, -2, 1, 21, 0, -4, 5, -8, 1, 0, 7, -2, -30, -9, -9, 5, 6, -5, 25, -3, 7, -9, 3, -10, -1, -2, -7, 4, -12, -13, -14, 3, -7, 8, -10, -4, 1, 22, -1, 3, -6, 0, 
  -8, -2, -9, -6, 1, 7, -6, 0, -3, -7, 6, -3, -6, -8, -7, 3, 5, -7, -12, 6, -1, -11, 6, 3, -10, -3, -8, -5, -3, 10, -7, -6, -5, -9, -3, 1, -1, 3, -9, 1, -12, -6, 0, -4, -6, -6, 8, -8, 9, 6, -6, -4, -12, -10, 1, -7, -7, -2, -9, 5, -10, 0, 7, -7, -9, -14, -13, -4, -7, -5, -7, 7, -3, -3, -6, 5, -9, -5, -5, -10, -7, 8, 2, -4, -7, -3, -4, 11, 8, 9, -7, -6, 7, -4, -8, -8, -1, 3, -20, -5, -7, -6, -7, -5, 22, -7, -8, 1, 0, 2, 5, -2, 0, -2, 2, -6, 8, 3, 8, -9, 2, 3, 2, 13, -5, 8, -6, 2, -18, 0, 3, 1, 0, -1, -5, 7, -17, 5, -9, -10, -6, 3, -7, -4, -4, 0, -10, -8, 10, 1, 1, -4, -5, 13, -6, -1, -8, -13, -11, 7, -19, -10, -4, -6, -3, -8, 4, -2, -3, -1, -11, 8, -13, -7, -7, -12, -2, 6, -9, -5, 2, 4, -12, 3, 0, 4, 2, 13, 2, -10, -9, 7, -13, -1, 6, -13, -2, 0, -1, 8, -5, 6, -4, 3, -4, 8, -12, -4, -10, 8, 2, -14, 4, 4, -6, 8, 1, -6, 6, 0, 4, 7, 3, -1, 
  6, 0, -24, 37, -11, 30, 13, 6, 19, 29, 5, 15, 22, 8, 22, 13, 3, 5, -8, 14, 0, 7, 22, 12, -9, 19, 8, -12, 3, -5, 18, 6, -15, 22, -49, 38, -6, 21, 16, -17, -14, 31, 14, 0, 27, 12, 14, 21, 2, 2, 3, 29, 4, 19, 2, 4, 14, -13, 4, 3, -9, -9, 15, 21, -13, 15, -23, -18, 18, 5, 14, 12, 30, 34, 14, 13, 24, -8, -1, -2, 10, 15, 23, 13, 24, 20, 1, -4, 8, 29, 6, -1, 4, 1, 23, 10, -15, -3, -19, -2, 8, 0, 13, 11, 16, 21, -1, 21, 31, -21, 8, -1, -4, 16, 22, -2, 15, 14, -7, 0, 7, 43, -21, -22, -6, 5, 15, -8, -30, -8, -31, -8, 24, 21, 13, 3, 4, -1, 43, 16, 10, 17, 14, -14, 8, 23, 17, 11, 34, 20, -9, 3, -16, 9, 29, 15, -2, -6, 1, 17, 5, 11, -16, 21, -11, 25, 5, 3, -17, 14, 14, 13, 16, 12, 1, 41, -5, 15, 28, 36, 16, 29, -4, -9, 6, 9, 2, 10, -5, 0, 14, 3, -16, 5, -8, 25, 36, -8, -12, -7, 27, 51, 20, 31, 4, 41, -5, 42, -12, 2, -2, -33, -12, 7, 0, -12, 8, 13, 6, 6, 30, 3, 1, -1, 
  4, -27, 6, -23, 9, -30, -35, 18, -48, -3, 7, -25, 1, -28, -36, -11, -28, -14, -32, -16, -1, -7, -25, 4, 12, -3, -30, -22, 19, 1, -20, -39, 4, 22, 25, -4, -11, -14, 20, 0, 7, -18, -30, 12, 6, 15, -20, -15, 22, 6, -2, 3, 15, 7, -19, -18, 7, -16, -12, 52, -14, -9, -2, 3, -1, -31, 7, 31, -35, 20, 28, -12, 4, -27, -22, 4, 25, -2, -14, -10, 13, 19, -9, -10, -1, -10, -30, 1, 17, 14, -4, 3, -20, -4, -6, 5, 20, -48, 32, -31, 9, -44, -4, 7, -13, 39, -16, -43, -7, -18, -36, 39, -1, -11, -21, 10, -37, -28, 15, -6, 5, 15, -34, 14, 7, 9, -6, -71, 3, -2, 7, -12, -20, -49, 20, -23, 9, -5, -22, -33, -36, -9, -14, 12, 18, -12, -48, -29, -53, -58, 4, -5, -10, -13, -10, -14, 0, -10, -23, -36, 36, -36, 13, -6, -7, -66, -30, -5, -13, -14, -5, -52, -45, -45, -11, 23, -5, 3, -68, -18, -49, -35, 19, 19, -7, -12, -8, 29, -1, -1, -34, -79, 26, -49, 27, -9, 33, -49, 15, -5, -1, -7, -8, -24, -70, -50, -31, 44, 5, -9, -26, 61, 26, 26, 19, -3, 8, 8, -19, -14, -28, -7, -27, -40, 
  -14, -17, -9, -13, -36, 12, -12, -3, 4, -9, -12, -20, -24, -16, -8, 2, -8, -10, -6, 0, -13, -3, -9, -4, -6, -5, -6, -11, -2, -5, 18, -7, -13, -5, -20, 1, -25, -9, 1, -4, 6, -4, 4, -15, -18, 0, -10, -21, -4, -17, -5, -20, -10, -13, -4, -8, -9, -3, -11, 11, 12, 3, 3, -9, 6, 2, 18, 4, -37, -25, -16, -7, 3, -3, -14, -10, -11, -7, -5, -19, -5, -15, -13, -3, -7, -14, -6, 3, -14, -22, -11, -21, 2, -4, -7, 2, -6, -22, 7, 0, -16, -4, 4, 16, 3, 0, -74, 4, -22, -24, 30, 2, -18, 1, -18, -1, 10, 2, -10, -5, 2, -6, -18, -32, -12, 8, 12, 13, 6, 15, -16, 9, -5, -6, 17, 4, 36, 28, -25, -5, 18, -9, 12, 14, 4, 2, -9, -18, -9, 5, -19, -6, 10, 17, -3, -13, -23, -12, 20, 12, 2, -1, -17, 7, 14, -2, -14, -25, 12, -31, -20, -5, -15, -16, -4, -7, 3, 0, -10, -16, -2, 4, -9, -6, -2, -18, -16, 4, 9, -21, -9, -1, 0, 18, -2, -1, -32, -1, -8, -6, 26, 0, -12, 13, -10, -7, -10, -32, -4, -15, -8, -26, -19, -4, 9, -4, -1, 7, -2, 0, 24, -28, 5, 0, 
  10, -14, 14, -12, 1, -38, -9, -10, -30, -13, -10, -29, -18, -16, -30, -31, 1, -10, -13, -27, -33, -20, 3, 9, -10, 12, -20, 27, -1, 1, -24, -26, 1, -10, 0, -28, 12, -19, -8, -25, -13, 1, 0, -8, -30, -21, -5, -32, 13, 6, -18, -17, -23, -16, -1, -2, 7, -5, 2, -3, 2, 0, -8, -27, -1, -32, -4, -17, 11, -12, -11, -12, 2, -15, -8, 11, -34, -8, -5, -7, 7, 28, -35, -13, -15, 8, -1, 13, -14, 17, -4, -25, -16, -15, -19, -5, 6, -26, 9, 0, 16, -35, 5, -1, -12, 6, -7, -22, -31, -2, 10, -1, 14, -4, 11, -19, -40, -39, 16, 3, -6, 2, -16, 0, -9, -6, -7, -20, 8, -22, -3, 14, 4, -11, 18, 0, 18, -9, 1, -5, -44, -14, 2, -26, 29, 9, -9, -7, -20, -18, -7, 3, -3, -7, -5, -12, 1, -16, -25, 7, 15, 7, 20, 5, 24, -27, -7, -3, 15, -6, 4, -37, -17, -2, -10, -40, 2, 7, -34, -13, -29, -28, 19, 5, -5, -10, -16, 3, -21, -6, -11, -4, 33, -29, 7, -8, 14, -36, 20, 1, 7, -11, -6, -3, -26, -12, -6, 7, -5, -14, -24, 39, 13, -23, 24, -1, -6, 1, -11, 17, -3, -3, -10, -15, 
  -12, 8, -8, -10, -8, -6, 6, -6, 4, 1, -15, 7, 1, -7, -8, -5, -7, 1, -5, -9, 8, -6, -10, -6, 1, -5, -8, -9, 6, -11, 0, -7, -3, -12, -15, 1, -11, 6, -5, -5, 1, -9, -22, 2, 5, -9, 6, 2, -5, -2, 7, -3, 10, -5, 4, -8, -8, 6, -10, -15, -2, -12, -4, -9, -13, 9, -4, -1, -3, -10, -9, 3, 3, 4, -16, -3, -6, -7, -4, -3, 2, 2, 7, -7, -2, 3, 0, 3, 11, -3, 10, -19, 0, -2, -2, -1, -16, 8, 0, 5, 0, -10, -4, -6, 8, 6, -10, 1, 5, -11, 3, 0, 5, 6, -5, 8, -5, 0, -9, 3, -2, 1, 2, 11, 6, 5, 3, 4, -2, -4, -3, 7, -8, -4, -2, 0, 2, 10, -16, -4, -5, 4, -8, -7, 0, 6, -4, 1, -10, -11, -5, -2, -10, 6, 5, -5, -3, -9, -6, -2, -17, 6, -8, 9, 1, 0, -1, -2, -16, -12, -15, -4, -1, 0, 5, -5, 9, -1, -8, -3, 0, -8, 11, -8, -8, 3, 4, 0, -6, -8, 9, -2, -12, 7, -16, -4, 6, 1, 4, 4, 1, -2, -12, -7, -6, -7, 4, -10, -4, 5, -7, -3, -9, 5, 0, 1, 2, 10, -5, -1, -10, -4, -8, -18, 
  27, 14, 32, -15, -3, -31, 20, 18, -23, -27, 24, -17, -17, -8, -9, -7, -38, 14, 10, -10, 0, -11, -4, 1, 14, -9, -19, 21, 10, -4, -39, -13, 31, 7, 42, -25, 6, -35, -9, 1, -7, -19, 10, -11, -15, -13, 1, -19, -15, 19, -16, -42, -20, -38, -2, -11, 5, 10, -4, 26, -1, 1, -37, -30, 16, -16, 8, 15, -19, -5, -23, -17, -28, -19, -13, -22, -37, 3, -1, -1, 2, 20, -30, -5, -8, -35, -23, -1, 14, 11, -2, 2, -8, -7, -50, -7, 21, -9, 14, 9, -10, -20, 10, -18, 12, 6, -28, -6, -9, 11, 8, -4, -9, -26, -18, -2, -16, -6, 7, 10, -5, -1, 18, 13, 9, -4, -30, -11, 16, 17, 24, -22, -31, -24, 3, 2, 5, -13, -13, 13, -1, -17, 2, -6, -13, -19, -10, 3, -25, 10, -11, 1, 20, 2, -8, -10, -2, -7, 11, -9, 20, -9, 10, -1, -1, -12, -18, -17, 13, -4, -11, 4, 13, -6, -24, -27, 2, -17, -18, -10, 1, -13, -3, 13, -2, -31, -6, 21, 4, 25, -11, -10, 16, -28, 9, -5, -19, 11, 32, -7, -16, -36, -26, -27, 2, -17, 14, -9, -1, -11, 1, 19, -11, -2, 16, -12, -19, 4, -2, -8, -17, -8, 17, 16, 
  -14, 6, -10, -12, -9, 5, 8, -10, 25, 10, -2, 1, -14, 2, -1, -3, -2, 10, 4, 6, 10, 5, -6, 1, 0, 12, 8, 5, 11, -7, 6, 0, -25, 0, -34, -13, 2, -13, -2, -3, -10, 16, 22, -17, -13, 2, 11, 9, 7, 5, -3, 20, -10, -7, 1, -6, 2, 5, -10, -9, -7, -4, 10, -8, -3, -8, -8, 2, -3, -18, 7, -2, -24, 4, -17, -4, 14, -7, -6, -16, 5, 19, -1, -11, -11, 2, 5, 1, 0, 7, -4, 17, 5, 9, -3, 5, 17, -7, 40, 1, -1, -1, -10, 2, 11, -19, 1, -8, 5, -11, -6, -12, 11, 10, -11, -10, -10, -16, -12, -3, -12, 1, -5, 28, -7, -7, 3, -6, 6, -3, 16, 10, 15, -8, 6, -3, -13, -9, -29, -4, -12, 3, 5, -1, 11, 10, -3, 11, -5, 11, -2, 3, 0, 4, 6, 30, 6, 3, -9, -6, -26, -8, -32, -2, -21, 11, -21, 1, -4, -14, -23, -11, -12, 0, 12, -8, 0, 12, -2, 16, 9, 0, -12, -7, -1, -4, -5, -14, 9, -5, 6, -4, -20, 5, -16, 14, 8, 2, -12, -21, 23, -2, -13, 14, -2, 6, -13, 15, -4, 14, -10, -27, -3, -8, -9, 10, 3, -1, 3, -5, 7, 1, -22, -18, 
  -20, -3, -6, 7, 11, -7, -13, -1, -5, -6, -3, -12, 7, -9, 2, 5, 0, -1, -3, -4, -9, -10, -5, -8, -4, -8, 6, 3, 6, 9, -9, 3, -18, -8, -13, 5, -4, 0, -5, -11, 2, -1, -1, 1, -7, -8, 7, 8, 7, -5, -3, 5, -3, 8, 7, -1, 5, -1, -9, -12, 6, 6, 10, 2, -8, 6, -1, -15, -7, -15, 4, -2, 11, -7, -7, 2, 4, -9, -3, 3, -4, 5, -8, 8, -3, 5, -4, 8, 6, 6, -1, 5, -4, 11, 4, -15, -25, -10, -13, 8, 1, -3, -2, 0, 21, -5, -5, -4, -4, -6, 1, -1, 1, 1, -4, -7, 1, 3, -10, 0, 8, -11, -3, -5, 4, 7, -8, 8, -19, 4, -6, -8, 1, -5, 2, -11, -4, 10, 1, -5, -11, 0, -11, -4, 9, -11, -13, -12, 8, 4, -3, 3, -9, 15, 6, -8, 6, 6, 5, 4, -3, -16, -2, 6, 20, 1, -15, -1, 12, -7, -12, -4, -10, -10, 3, 2, -11, -10, 1, 0, 4, -9, 8, 2, -5, 2, 9, -5, 4, 7, 2, -14, -11, 2, -16, 5, -5, -4, 4, -3, 62, -4, -5, -8, -14, -1, -6, 0, 10, 10, -2, -15, -6, -7, 0, 9, -14, -6, 6, 14, 8, -15, -18, -6, 
  29, 0, 23, -33, 7, -15, 1, 6, -34, -12, 7, -34, -15, -26, -22, 8, -28, 11, 0, 0, 15, -5, 5, 2, 28, 2, -25, 50, 3, 1, -22, -20, 35, -3, 11, 6, -1, -43, -9, -37, 4, -31, -8, -16, -14, 7, -19, -21, 12, 20, -16, -15, 0, -34, -1, 2, 15, -9, -7, 26, -5, -29, -5, -18, -10, -32, 15, -14, 17, -9, -25, 1, -5, -16, -11, -23, -57, -20, -17, -20, 6, 25, -54, -42, -3, -23, 0, 14, -3, 9, -4, -8, -15, -14, -42, -33, 1, -20, 27, -2, -3, -20, 1, 5, -24, 30, -50, -13, -21, 13, -17, -2, 8, 4, -4, 10, -28, -37, 30, 8, -7, -26, 1, -4, 30, -11, -14, -4, 18, 18, -10, 5, -2, 21, 48, 14, 13, 1, -37, 10, -18, -3, 1, 15, 6, 0, -15, -7, -37, 7, 17, -12, -16, -8, -21, -24, 5, -6, 11, -5, 13, 8, 6, -20, -2, -26, 8, 5, -5, -6, -26, -46, 10, 4, -34, -7, 4, 10, -33, -28, -7, -6, 17, 9, -25, -14, -7, 13, -9, -11, -18, -41, 15, -7, 6, -14, 32, -7, 12, 11, 21, -41, -6, -23, -26, -6, -7, 6, -3, -11, -33, 55, -3, -28, 34, 5, -9, 9, -9, 2, -2, -7, -15, 14, 
  3, -9, -8, -1, -3, -8, 7, 2, 2, -13, 0, -1, -1, 3, -12, 4, -3, -10, 9, -9, -4, -1, -3, -4, -5, -4, 9, -4, 0, -4, 0, -11, 9, 3, -21, -10, -14, -12, 13, 5, -7, -3, -2, -19, -10, 1, -3, 6, -8, 3, -4, -12, -10, 7, 11, 2, -8, -12, 2, -3, -7, -2, -17, -16, 0, -14, 12, -15, 19, -8, 3, -6, -4, -10, -9, -9, -5, -14, -4, -13, -19, 6, -6, -13, -8, 1, -10, -5, 2, 7, -3, -8, -2, -6, -10, -14, -20, -16, 8, 1, 21, -5, 20, -2, 7, 10, -1, 0, -16, -9, -4, 7, 5, -7, -3, -3, -3, 18, 3, 5, -11, 11, -8, -8, -5, 5, 0, 8, -7, -1, 26, -5, -1, -10, -11, -2, -12, -1, 0, -1, -7, -10, 0, 4, -4, 0, -2, -9, -8, -16, 19, -6, -7, -12, -4, -12, -9, 3, -8, -5, -9, -3, 5, -18, -4, -3, -7, 1, -11, 7, -3, -13, -4, -18, -10, 0, -7, -12, 2, -14, -13, -8, -1, 6, -10, -3, 5, 5, -10, -14, -18, -3, -6, -1, 7, -12, 11, -1, 5, -2, 4, -9, 7, -10, -17, 2, 6, -2, 3, -11, -7, -15, -12, -18, 33, 1, 0, 3, 4, 8, -12, -1, -9, -7, 
  -26, 15, -13, -9, -28, 12, -5, 29, 1, -20, 2, 1, -15, -27, 18, -9, -4, 13, 16, -14, 36, 13, -6, -1, -19, 9, -38, 11, -9, 1, -9, -5, 7, 6, 25, 22, 10, 3, 14, -7, 9, -30, -5, -4, 17, -3, -7, -26, 15, 1, 8, -27, -25, -2, -8, 7, -15, -9, 16, 6, 1, -13, -27, -15, -16, -2, 13, -15, -29, -17, 10, -9, 7, -2, -7, -36, -31, -2, -32, 1, 0, 6, -30, -36, 3, -15, 0, 2, -10, 16, 2, 0, 10, 5, -14, -44, -11, 0, 15, 13, 5, -26, -24, -2, 1, -6, -6, -12, -16, -1, -13, 32, 0, -3, -18, -34, -55, -11, 1, 3, -30, -15, 0, 0, -24, -3, -44, -11, 16, -10, 22, 12, -3, -38, -10, -5, 7, -34, -24, -39, -44, -7, -8, -18, 3, -13, -19, -25, -34, -29, -8, 5, -11, -16, 0, 4, 2, -20, -32, -18, 25, -18, 56, 15, 22, -9, 2, -11, -13, 16, -27, -23, -17, 18, 6, 2, 4, -7, -40, -53, -22, 21, 2, -9, -41, -11, -8, 16, 14, 3, -11, -7, -3, -48, 24, -17, -33, -34, 42, -9, -46, -17, -1, -37, -8, -48, -10, 34, -17, 4, 10, 37, 19, 24, -2, -8, -27, 11, -3, -16, -36, 4, 6, -28, 
  -16, -10, -6, -10, 1, 1, 2, 5, -7, -2, -2, -7, 4, 0, -12, -12, -3, 18, -8, 8, 4, -10, -2, -2, 4, -1, 3, -23, -2, -2, -19, 6, -15, 1, -19, 2, -21, 0, 2, 3, -3, -6, -12, 2, 4, -10, 2, -11, -11, 6, 9, 0, -3, 0, 1, 0, 8, -2, -2, 11, 0, 0, -12, -10, -9, -12, -12, -7, -11, -3, 3, -7, 5, -2, -3, -2, 7, 5, 5, -5, 1, 2, -3, 5, 3, 0, -11, 7, -6, -5, -9, -10, -2, 10, 6, 9, -3, 0, 1, 1, 9, -12, 7, 10, -2, -1, -4, -11, -13, -13, 1, -13, -1, 5, -12, 4, -3, -13, -12, -8, -10, -5, -2, 16, 2, -10, -5, 9, -23, -15, -14, -6, -4, -13, -1, 3, -3, 6, 6, -8, -24, -7, 0, 8, -5, 9, -4, -14, 7, 0, -4, 7, 6, -9, -10, 20, -7, 7, -13, -1, -18, -3, 10, 7, 9, 6, -9, -3, -4, -7, -12, 2, 2, -4, 4, 12, 8, 10, 4, -10, -5, -13, -3, -8, -10, 7, -1, 13, -8, -6, 1, -9, -2, 4, 14, 5, 13, -10, 8, -1, 31, -7, -8, -6, -14, 4, -7, 17, 2, 11, 6, -7, -11, 1, -2, 9, -10, 8, 9, 6, 3, 3, -2, 4, 
  28, -3, 41, 0, 25, -35, -29, 2, -19, -6, -6, -30, -35, -21, -19, -20, 10, -12, -6, -31, -23, -34, 9, 6, -17, 11, -17, 21, 11, -11, -22, -19, 0, -9, -14, -25, 20, -29, -3, -23, -2, -9, 6, -15, -26, -5, 8, -40, 42, 3, 7, 2, -7, -28, 2, -1, -12, 0, 2, 29, -6, -5, -24, -14, 4, -38, -5, -8, 27, -6, 9, -15, 1, -12, -2, -16, -55, 11, -8, 4, 6, 7, -40, -15, -27, -9, 2, 3, -5, 5, 6, -24, 22, 4, -28, -36, -7, -45, 2, -19, 33, -21, 10, -5, -14, 12, -10, -18, -15, 0, 7, 0, 12, -6, 8, -40, -18, -18, 13, 0, 8, 8, -3, 3, 4, -6, -14, -48, 6, -17, -15, 33, 17, -11, -3, 11, -14, -16, 16, 31, -17, -10, 0, -7, 23, -16, 34, 39, 3, -10, 1, -8, -20, 16, -14, -42, -7, 0, 21, -11, 13, -1, 19, 8, 28, -11, 13, -4, 31, 0, -24, -13, -10, 10, -8, -50, 16, 21, -6, -41, -39, -11, -12, 15, -22, -6, -5, -18, 8, -7, -14, -32, 41, -23, 21, -4, 20, -23, -3, -1, -12, 14, -2, -16, -28, -22, 1, 13, -22, -15, 39, 9, -7, -42, 37, -3, -35, 5, 1, 2, -26, -4, -13, -3, 
  -7, -8, -3, -12, -2, -9, -12, -5, -10, -6, -7, 2, -5, -10, 10, -8, 4, -1, -12, -15, -5, 1, -8, -7, 3, 1, 6, -35, -5, 2, -6, 11, -8, -10, -8, 6, -11, 2, -19, 3, 14, 8, 4, -3, -10, -3, -8, -9, 7, -2, -8, -11, -12, -1, -5, -6, 2, -1, -11, -6, -10, -8, -15, 3, 8, -13, 9, -6, -10, -3, -1, -6, 13, -12, -4, 5, -13, 6, 2, -4, -7, 5, 0, -4, 7, -4, 4, 0, -9, -3, 3, 0, 2, -5, -12, 8, -12, -2, 5, -7, 8, -3, 6, 1, 2, 7, 0, -9, -8, -8, 0, -14, -9, 4, -13, -9, 0, 3, 0, -8, -14, -4, -7, 4, 4, 1, 6, -7, -9, -6, 0, -9, 5, 2, 3, -1, -4, -4, -4, 0, 5, -16, 5, -8, 2, -2, -5, -3, -7, 2, 7, 2, -12, 1, 3, -11, -12, -2, 0, -9, -1, 5, 10, -15, 0, 1, -5, -6, -2, 0, -10, -15, -13, -9, 1, -14, -6, -11, -2, -5, 4, -13, -5, 3, -7, -4, 4, -2, -14, 5, -10, -10, 3, -10, 9, 0, -9, -3, -10, 7, -12, -3, -8, -14, -16, -10, 3, 3, -2, -2, -4, -8, -2, -2, -2, -9, -9, -3, 0, -7, 0, -7, 1, 3, 
  -5, -11, -11, 17, -23, 10, 13, -4, 40, -11, -74, -2, 4, 4, 0, 2, 8, 6, -14, 2, 3, -13, 6, -2, -5, -13, 3, -4, -5, -9, 4, 5, -7, 7, -47, -12, -4, -2, -2, -20, -6, 15, -49, -26, -9, 3, -6, 11, -12, -12, 7, -3, -1, 4, 4, -5, -4, 1, -11, 19, -10, -3, 5, 6, -1, -14, -21, -18, -13, 6, 2, -3, 11, 7, -46, 20, 6, 1, -11, -11, 5, 13, 4, -7, 3, 0, 9, -1, 2, -1, 7, 8, -1, -3, 8, 13, -7, -8, -4, 13, -4, -8, -2, -6, 37, 1, -8, 6, 10, -6, 5, -6, 5, -3, -1, -3, -12, 0, -11, -1, -7, -14, 8, 19, -1, 6, -11, -14, -18, -27, -32, -14, -6, 1, 0, 7, -10, -8, -67, -9, -18, -10, -7, -1, -1, 14, -1, -12, 3, -3, -1, 2, 2, -9, 6, -3, -5, 1, -15, -2, -13, -14, -42, -12, -10, 0, -11, -11, -7, -8, 5, -2, -4, 4, -10, 1, 3, 0, -14, 10, 11, -13, 3, -9, 1, 8, -2, 0, 4, 8, 11, -6, -19, -12, -29, 4, 8, -15, -20, -12, 6, 13, -19, -6, -13, -8, -9, -4, 1, -19, -1, -55, 4, 6, 5, -1, 2, -5, -1, -5, -9, 2, -3, -14, 
  26, 6, 38, -26, 15, -14, 3, -12, -32, -21, 7, -32, -8, -20, -20, 0, -2, -13, -13, -7, 2, -14, 11, 14, 12, 11, -17, 14, 15, -15, -40, -34, 15, 19, 9, 4, 32, -40, -14, -33, -12, -7, -5, -32, -4, -12, -18, -19, 20, 5, -28, -25, -32, -30, 3, -7, 0, 10, -15, 26, 1, 7, 2, -16, 5, -34, 17, -13, -8, 2, -43, -16, -9, 16, -12, -18, -59, -4, -21, -14, 0, 29, -42, -24, -7, -35, -4, 4, 1, 22, 0, -25, -4, -7, -17, -15, -2, -14, 4, -10, 35, -37, 4, 7, -13, -1, 6, -24, -38, -4, -18, -6, 6, -11, -11, 1, -27, -41, 10, -8, -5, 19, -18, 0, 14, -17, 8, -14, 14, -15, -13, -7, 29, -25, 8, 3, 32, 5, -11, -1, -59, -7, -11, -16, -8, -12, 0, 18, -19, -29, -12, -4, -8, 4, -20, -21, 14, -3, -12, 9, 16, 7, -8, 25, 37, -23, -29, -1, 11, 16, -9, -29, -19, -10, 3, -1, -3, 0, -31, 6, 4, -13, 6, 7, -20, -6, -5, 5, -3, -18, -8, -33, 24, -35, -1, -15, 33, 4, -11, 13, 34, -16, 0, -2, -38, -6, -13, 9, -6, -18, -14, 53, -12, -25, 30, 4, -14, 10, -8, -3, -5, 5, 6, -18, 
  30, -4, 32, -36, 11, -48, 33, -11, -43, 2, 1, -38, -13, -42, -40, 4, -12, -9, -13, -29, 2, -6, 6, 5, 13, 11, -15, 31, 14, -16, -35, -28, 12, -13, 5, -44, 12, -30, -19, -34, -22, -11, -11, -28, -42, -35, -4, -7, 12, 22, -28, -24, -22, -19, -16, -9, 14, 21, -1, 7, 5, -2, -47, -47, 0, -32, 7, -12, -19, 7, -47, -29, -4, -25, -7, -7, -57, -36, -24, -2, 10, 35, -64, 5, 5, -1, -11, 0, -3, 11, -24, -40, -13, -13, -19, -11, 1, -25, 3, 34, 9, -11, -9, 2, 5, 0, 5, 0, -29, 20, 17, 8, -5, -16, 13, 1, -25, -13, 35, 10, -16, 15, -13, -11, 21, -6, 1, 12, 9, -20, -17, -12, 13, -14, -4, 0, 9, 21, -3, -24, -5, -30, -2, -27, 6, -12, -12, -35, -7, -11, -22, -6, -17, -8, -14, -38, 18, -8, -20, -6, 3, 13, -1, 18, 31, -27, -18, 1, 13, 20, 21, -43, -18, -18, -11, -15, 2, 8, -11, -10, -24, -21, 7, 17, -36, -3, -7, -4, -5, -5, -15, -20, 3, -18, 2, 3, -4, -23, 26, 14, -8, -9, 12, 8, -12, -27, 4, 24, -15, -24, 13, 35, -8, -29, 37, 0, -7, -5, -9, 21, -15, -6, 20, 12, 
  -4, 40, -11, -10, 29, 29, 24, 6, -26, 27, 19, 38, 23, 3, -19, 31, 9, -3, -9, 4, -15, 12, 5, 3, -15, 1, -7, 41, -27, 3, -13, 20, 14, 6, 0, -27, -27, -12, -13, 5, 2, -33, -28, -29, -6, -11, -21, -28, 13, 2, -12, -10, -9, 0, 8, 0, -3, 0, -3, -5, -1, -12, -5, -3, 0, -16, -8, -35, -2, -20, -8, -6, 1, 7, -12, -38, -32, -44, 3, -24, 20, -5, -30, -33, -27, -23, 12, 10, 6, 2, 4, -1, -6, -2, -32, -25, -23, -12, -4, -27, 7, -5, -22, -4, -18, -2, -33, -16, -29, -21, -1, -5, 1, 3, -31, -23, -13, 1, 5, 0, 17, -6, -6, 10, 11, -1, -27, 4, -7, -6, -8, -2, 9, -14, -26, 2, 0, 10, -40, 5, -20, -34, -9, 7, 6, -2, -12, 0, -14, -6, 6, 1, -22, -10, -6, -5, -21, -5, 11, -8, -14, -14, -5, -37, -8, -22, -11, -6, -15, -19, -27, -13, -18, -16, -26, -32, -9, 2, -29, -21, 1, -8, 9, 6, 14, 2, -3, -4, 18, 8, -16, -1, -24, -22, -6, 0, -3, -4, -1, -1, 4, -21, -14, -16, -18, -9, 20, -39, -8, -12, -4, 4, -17, -4, 28, -3, 4, 2, 3, -5, 10, -5, -8, -19, 
  35, -15, 32, -1, 24, 12, -21, -12, 7, -1, -30, -13, 0, -6, 9, -28, -5, -19, 0, 23, -11, 17, -6, 0, 25, 0, -20, 3, -3, -11, -3, -7, 8, 20, -10, 0, 1, 6, -13, -5, -2, -2, -15, 2, -12, 0, -1, 8, 1, 2, 35, -6, 8, 10, -17, -9, 8, 1, -4, 32, -2, -11, 16, -8, 12, -56, 15, 23, -23, -1, -2, -30, -7, -8, -21, -19, -31, 35, -3, 52, 5, 8, -30, 12, -23, 5, 1, 9, 8, -1, -7, -31, -13, -16, -29, -15, 2, -38, 5, -35, 18, -23, 12, -2, -18, -16, -19, -21, -7, 13, 4, 2, 7, -8, -1, -13, -13, -19, -1, 4, 0, 10, -12, 19, 24, 3, -2, -24, 18, -6, 23, 30, 8, -11, 26, 0, -7, -16, -15, -1, -8, 8, 0, -16, 3, -13, 0, 27, 28, -29, -8, 4, 17, 0, -7, -20, -3, -2, 8, 18, 30, 10, 14, -12, 30, -11, -17, -13, 8, 29, 0, -19, -17, -2, -14, -38, 3, -4, -21, -21, -8, 0, 0, 0, 9, 2, -13, 21, -10, -15, -22, -4, 44, -11, 29, -6, 11, -27, 3, 1, 0, 11, -2, -25, -6, -18, 4, 17, -1, -15, 10, 56, 27, -6, 22, 3, 17, 8, 5, -8, -27, -18, -3, 12, 
  -11, -3, 0, 3, 0, 2, -13, -8, 8, -5, -11, -7, -15, 6, 7, 5, -7, -8, 5, -4, -1, -13, 0, -9, -9, -2, -10, -7, 1, -5, -6, -8, -12, -11, 1, -9, -6, 1, -8, 5, -8, -7, 0, -1, -16, -12, -5, -11, -7, 4, -5, 0, 2, 0, -13, -11, -10, 0, 2, 4, -2, -9, -16, -20, -6, 4, 0, 6, 5, -3, -1, -6, -4, -7, 6, 4, -5, 3, 5, 6, -8, -5, -5, -11, -11, -6, -4, -1, -2, -5, -4, 1, -8, 6, -18, -7, -13, -4, 8, 7, 6, -10, 7, -13, -5, 2, 6, -8, 5, -4, -6, -11, -1, 4, -1, -4, -8, -11, -9, -6, -2, 3, -10, 6, 0, -11, -11, -16, -6, -1, -2, -4, 3, 2, -2, -2, -4, 7, 6, 4, -2, -11, -6, -5, 6, 1, 7, -4, -10, -3, -9, 6, -9, -16, 6, -7, -9, -4, -10, 2, -8, -5, 1, -1, 10, -5, 6, 7, -7, -6, 10, -3, -11, -8, 7, -10, -6, 5, -2, -18, -11, -13, -8, 6, 0, -3, -10, -2, 4, 6, -11, -2, -5, -9, 5, 5, 3, -15, -5, 1, -16, -1, 5, 1, -7, -11, 0, -10, -12, -6, -9, -3, -2, -4, -4, -7, 7, -11, 3, 8, -10, -10, 5, -7, 
  -6, -8, -5, 28, -16, -2, 1, -4, 7, -8, -76, -7, -5, 17, 16, -23, 5, 3, 1, 12, -17, 1, 10, -6, -4, -12, -2, -4, 7, -9, -1, 3, -8, 13, -29, 10, -27, 1, 16, -13, -2, 9, -43, -12, 0, -2, 9, 14, 1, 1, -7, 17, -5, 5, -11, 6, -4, -12, -12, 20, -11, -9, -2, 12, -22, -1, -17, -12, -10, 3, 5, -6, 25, 10, -2, -8, -5, -15, 3, 10, 12, 1, -11, 0, 10, 12, 7, -1, -8, 17, -6, 7, -4, -7, -3, -3, -20, -1, -24, -1, -11, -2, 0, -3, 2, -11, 1, 3, 11, -4, 9, 3, -2, 3, 9, 9, -1, -13, -4, 8, -16, 14, -5, -24, 6, -7, 7, -2, -41, -3, -45, -16, 4, 16, 7, -7, -7, -25, -15, 9, -15, 13, -12, -3, -13, 13, 1, 0, 14, 1, 0, 1, -2, -16, 12, 0, -8, 4, -9, -9, -15, -7, -34, -7, -25, 15, -26, 4, -16, 10, -25, -3, -12, -2, 7, 21, 3, 7, 9, 14, -3, 14, -2, 5, -16, 4, 5, -1, 4, -13, -6, 12, -9, 4, -11, 25, 5, -4, -11, -26, 12, 17, 3, 6, -5, 17, -2, 30, -16, -1, -5, -33, 3, -13, 6, 3, 0, 3, -8, 28, 17, 9, -17, 0, 
  -2, -23, 9, 6, 11, 3, 15, 2, 17, 20, -63, 15, 20, 0, 1, -8, -10, -1, 6, 6, -7, -1, 8, 0, 10, -8, 2, 7, -8, 4, -2, 9, -10, 11, -10, 5, -15, -12, 5, 3, -15, 8, -21, -5, -5, 7, -8, -10, -14, 3, -16, 18, -5, -4, 1, 0, -4, 5, 2, -35, -12, -4, -7, -19, -5, -4, -2, 11, -1, -12, 6, -6, -3, -16, -36, -18, 13, 6, -1, 2, -4, -3, -8, -9, -7, -2, 3, 6, -9, 1, -4, -3, -4, -6, -9, -9, -3, -19, 0, -9, -10, -6, 1, 2, 2, -6, -81, -11, -13, -10, -7, 9, 13, 5, -9, 1, 6, -7, -5, 8, -1, -11, -7, 31, 2, -10, -7, 3, 3, -8, 1, 1, 5, -11, 5, 3, -10, -12, -65, 16, 6, 4, 1, -19, 3, 0, 2, -5, 5, -5, 1, 4, -4, 2, -9, 16, -2, -5, -7, 2, -12, 3, -26, -14, -9, 2, -7, -11, -5, -12, -35, 12, -1, -1, 2, 17, -2, -5, 3, -2, -10, 5, -7, 0, 4, -12, 0, -14, -6, 10, 15, -3, -30, -7, -36, -7, 2, -3, -3, -7, 9, 16, -73, 2, 0, -16, -9, -30, -9, 7, 13, -31, 0, -12, 7, 10, -1, 6, 1, 3, -2, -5, -9, -10, 
  -3, -2, 6, -3, -1, 2, -8, 8, -7, -4, 6, -3, -3, -6, -9, -5, -4, 6, -8, -2, -5, -5, -6, -3, 5, -13, -8, -4, 0, 7, -8, -8, 0, 5, -4, -8, 1, 3, -8, 3, -8, 6, -1, -12, 4, -4, 6, -14, -5, -4, -1, -7, -7, -7, 4, -3, -1, -2, 1, -18, 8, -6, 1, -10, 3, -4, 13, -5, 9, -8, 0, -9, 10, -11, -6, -5, -14, -10, -3, 1, 1, -1, -4, -3, -11, -6, -4, -6, 7, -8, 9, -2, 3, -3, 5, -12, -9, 6, -7, -15, -3, -4, 5, -2, -13, -7, 0, -3, 0, -8, 1, 4, -6, -3, -9, -9, 1, -6, 3, -8, -11, -8, -7, -9, 0, 6, 2, -8, -9, -10, -1, 2, -4, -10, 2, 4, 2, 6, 12, -1, 2, -10, 3, -12, 10, -10, -7, 2, -4, 6, 8, 6, -10, -3, -4, -18, -2, 7, -3, -17, -9, -10, 2, 1, -3, -7, -12, 3, -9, 5, 1, -12, 1, -10, -4, -10, -11, 8, 4, 6, 6, -2, -3, 8, -3, 0, 2, -11, -9, 7, -2, -6, -5, -5, -1, 15, -5, -4, -8, 7, 1, 1, -1, -9, -6, 4, 1, -1, -3, 8, -1, -1, 4, 3, -4, -2, 1, 12, 8, -9, -7, 5, 3, -10, 
  -9, 24, -25, 41, 22, 1, 12, 34, 18, 13, -105, -13, 1, 25, 56, 2, 41, -13, -7, 17, -13, -13, 24, 11, 9, -1, 0, -14, 34, 9, 5, 17, -4, 3, -18, 32, -13, 5, 17, -7, 17, 37, -51, 1, 6, -1, 45, 13, -9, -30, -4, 21, -7, 0, 47, 9, -7, 6, 39, 5, 0, 12, 28, -5, 5, -3, -10, 17, 64, -14, 11, -4, 41, 48, -62, 2, 19, -7, 34, 6, 12, -8, -1, 1, 15, -3, 20, 5, 9, 5, 32, -27, 13, 23, 8, 1, -25, -17, -20, 5, 6, -5, 33, 47, 29, 6, -32, -5, -10, -16, 77, 27, -8, 2, 1, 16, -11, -10, 19, 22, -3, 33, -6, -49, 8, 17, 19, -5, -13, 1, -28, -12, 45, 21, 31, 39, -4, -3, -84, 1, -1, 10, 54, 4, -5, 29, 9, 5, 18, 16, 14, 10, 2, 13, 14, -7, -8, 4, -4, 2, -11, 7, -45, -18, 1, 7, -4, -17, 0, 41, -92, 4, 11, -17, 22, 32, 8, 35, 8, 24, 14, 10, 22, -4, -17, 44, 11, -38, 8, 8, 4, 20, -15, 7, -40, 51, -24, -15, -43, 7, 32, 41, -127, 26, -24, 12, -1, 9, 14, -3, -17, -17, -15, 14, 7, 12, 20, 11, 22, 17, 48, 29, 10, -3, 
  -23, -9, -14, -2, -13, 7, 10, -4, 11, 24, 11, -4, 5, 5, 6, -16, 5, 7, -1, -7, 1, 6, 16, 7, 1, -5, 4, 9, -2, -10, -3, -1, -24, -6, -22, 20, -23, -7, 3, 4, -15, -4, -14, -17, 0, -4, -4, 6, -10, 2, 8, -1, -16, -2, -2, -3, -10, -3, -8, 31, -6, 1, -22, -10, -3, -12, -16, -14, -20, -6, 6, 0, 11, 16, -18, -4, -4, -9, -9, -16, 10, 8, 3, -6, -8, -9, -6, -5, 8, -7, 0, 15, -10, -2, -3, -17, -15, -11, -4, -8, -14, -9, -10, 5, 11, 2, -6, -11, 1, -8, -9, -20, -13, -4, 1, 5, 2, -4, -6, -5, -17, 12, -17, -3, 1, 3, 4, 3, -11, -2, -48, -2, -19, 11, -9, -6, -2, -15, -40, 6, -10, -3, 2, -18, -7, 2, -1, -7, -1, 5, -12, -4, 9, 12, 2, 36, 2, 9, -4, -15, -17, -12, -13, -12, -10, 7, -16, -1, -4, -3, -21, -20, -17, -7, 4, 2, -3, -3, 6, -7, -8, 7, 0, 4, 2, 1, -1, 19, -1, -5, -16, 9, -26, 3, -11, 9, -25, -3, -16, -15, 16, 12, -40, 8, -2, 3, -4, 10, -10, -6, -12, -23, 0, -3, 5, 5, 5, -3, 3, 32, 5, -6, -7, -20, 
  -12, -3, -6, -8, 8, 10, 1, 3, -15, -3, -8, -8, -9, -4, -7, -2, 3, 1, 4, 6, -4, 18, -1, -2, 3, 3, -7, -16, -10, 1, -24, -5, -2, 0, 7, -10, 4, -17, 2, -10, -2, -16, 0, -17, -14, -23, -23, -13, 13, -7, -14, -20, -4, -33, 5, -9, 0, 0, -1, 23, -1, -9, 3, -15, -6, -19, 0, -31, 8, -18, -24, 0, -6, -18, 8, -20, -36, -21, 3, -25, 3, -9, -12, -16, -11, -16, 9, -7, -5, 3, -10, -6, 2, -7, -9, -23, 8, -27, 3, -12, 11, 5, -9, -10, -14, -12, -6, -9, -21, -13, 7, -2, 0, -10, 5, -9, -17, -25, -6, 4, -8, -4, 0, -11, -18, -12, -15, -8, -3, -21, -13, 1, 0, 14, -21, -11, 15, 1, 0, 4, 3, -15, -1, -4, 7, -10, -5, 1, -25, -24, 2, 0, -16, -1, -14, -18, -19, -7, -1, 7, -7, -9, 1, -10, -1, 6, -32, -7, 5, -5, -4, -26, -10, -11, -4, 5, 0, -4, 1, -26, -1, -20, -1, 0, 1, 11, -8, -5, 2, 7, -6, -9, 7, 1, 15, -11, -7, -15, -1, 3, 6, 1, 4, -15, -24, -13, -1, 11, 6, -21, 0, 5, -7, -18, 7, 0, -11, 10, -12, 20, -7, -2, -10, -2, 
  21, 9, 32, 5, 6, -7, -22, 26, -18, -10, 8, -12, -9, -21, -11, -13, -26, 4, 14, 6, 27, 10, -2, 12, 28, 18, -12, 52, 19, 9, 1, -17, 28, 11, 29, 8, -6, -9, -5, 7, 32, -15, -19, 23, 5, -14, -14, -39, 19, 30, 16, -30, -25, -23, -17, 4, 20, 3, -12, 43, 3, 4, 4, 9, -4, -31, 8, 6, -10, 9, -12, -21, 2, -23, -12, -14, -24, 15, -13, 13, 7, 44, -16, -20, -14, -11, -6, 1, 14, 20, 3, 11, 25, 6, -45, -8, 26, -38, 26, -10, 27, -40, -4, 9, -5, 35, -30, -35, -15, 2, 28, 30, -5, -9, -2, -3, -19, -22, 19, 8, -7, 22, -6, 0, -14, -11, -22, -24, 16, -12, 17, 6, 1, -24, 37, -7, 33, -14, -15, 1, -48, -13, -15, 1, -10, -5, -11, -19, -42, -25, -2, 0, 2, 13, -8, -9, -1, -26, -21, -3, 29, 15, 30, 15, 33, -13, 12, -11, 6, 7, -26, -44, -24, 0, -8, -12, 22, 17, -44, -18, -39, -18, 20, 22, 11, 9, 1, 25, -18, -3, -51, -23, 40, -28, 46, -22, 11, -28, 24, -6, -14, 10, 11, -14, -23, -48, 54, 27, -5, -18, 6, 68, 36, 28, 21, -10, 7, 22, -4, 1, -17, -17, 18, -15, 
  13, 3, 9, -9, 2, 1, -6, 0, -3, 7, 3, -13, -1, -11, -4, 8, -8, 2, 2, 4, -15, 0, -8, 0, -11, -4, 3, 2, -4, -9, -18, -15, 0, -11, -8, -5, -11, -10, -22, 0, -5, 2, 4, -8, -5, -18, 6, -7, -4, -12, 6, -7, 3, -8, 3, -4, -11, -5, 7, -11, 0, 4, 0, 1, -6, -7, -10, 6, 1, -3, -7, 0, 4, 5, -5, -10, -8, -10, 3, 4, 2, 4, -15, -4, -2, -14, -1, 12, -7, -7, 3, -18, -7, -13, 0, -3, 6, -6, 2, -1, -12, -14, -6, -8, -7, -1, -9, -4, -8, -10, 7, 2, -2, -5, -8, -2, -1, -13, -4, 0, -9, -8, -5, -15, -3, -13, -7, -13, -12, -13, -8, 2, -18, -12, -3, -2, 8, 7, -5, -22, -18, -3, 7, -3, -4, 0, -5, -2, -12, -13, 5, -5, -14, -13, -10, -5, -10, -9, -7, -7, 2, -2, 4, -6, 15, 1, -20, 4, -5, -12, -12, -22, -19, -11, 7, -9, 0, -2, -8, 6, -13, 8, 11, 9, 2, 7, -4, -5, 7, -7, -7, 2, -3, -8, 4, 7, -3, -8, -13, 5, -3, 6, 4, -8, -14, -17, -9, -3, -1, -7, 6, 17, -10, -6, 11, -7, -11, -2, 2, -11, 9, 6, 5, -1, 
  -11, -1, -18, 17, -17, -1, 9, 4, 24, -1, -72, -14, 6, 0, -4, -12, 11, -8, -13, 11, 4, -8, 20, 9, 7, -9, 11, 1, 14, -8, 3, 4, -1, -6, -14, -3, -24, 9, -10, -10, -18, 3, -22, -12, 3, -3, -14, 11, 4, -13, 4, 25, 2, 7, -12, 3, 8, -9, -1, 21, 0, 7, 8, 0, 12, 7, 18, -4, -12, 1, 20, -3, 13, 7, -37, 4, -7, -5, -1, 6, 9, -11, 0, -2, -5, 7, 13, 11, 0, 5, 1, -4, 2, 4, 4, -11, -2, -6, 19, -12, -7, -7, -3, -10, 10, -13, 2, 7, 1, 1, -12, -18, 9, 2, 10, -2, -5, -3, 0, 11, -12, -6, 4, -8, -12, 5, 4, 2, -13, -9, -22, -13, -10, 3, 10, -10, -22, -13, -44, -2, -17, 3, -1, -2, 3, -6, -9, 2, 7, -5, -7, -2, -8, -4, 0, 22, -2, -6, -27, 1, -22, -15, -38, -14, -24, -1, -7, -8, -8, 10, -26, -4, 2, 1, -19, 12, -7, -2, 0, 17, 1, 2, 10, -3, 2, -13, 6, -1, 4, -11, -3, -7, -12, -8, -24, 8, -6, 1, -22, -17, 18, -3, -4, 15, -16, 3, -14, 14, -1, 3, -13, -38, -8, -7, 4, 2, 7, -4, -3, 12, -1, 10, -14, -2, 
  -5, -12, -25, 10, -9, -7, 8, -1, 13, -7, -14, -5, -12, 10, -3, -3, 2, -5, -7, -4, -3, -4, 3, -4, -9, 14, 5, 2, 11, 3, -2, -5, -6, 7, -4, -1, -1, 2, -6, -9, 9, -2, 8, -14, -13, -8, -2, 5, 9, -7, -4, -11, -2, 2, -10, -7, -4, 16, -3, -11, 5, 1, -18, -12, -14, 5, 8, -7, 1, -19, -5, -3, -3, 0, 12, -2, 5, -12, -5, -12, -9, 5, -11, -13, 5, 8, 8, 4, -10, 8, -4, 2, -2, 9, -11, -10, -8, 7, -12, 9, -10, 9, -7, -7, 9, 10, -9, 4, -12, -1, 4, -8, 1, 2, 8, -6, -14, -12, -2, 3, 1, 10, 0, 1, -1, 9, -8, -10, -25, 19, 3, 15, -10, -15, -6, 0, 15, 12, 6, 11, -2, 1, -3, -4, -3, 0, 12, -24, -7, 6, -8, 8, 11, 23, -1, 4, -8, 8, -12, 1, -14, -5, 4, 16, 15, -22, 9, 3, -2, 10, 3, -4, -19, 15, -1, 25, 4, -5, 8, -26, 8, 4, -4, 3, 0, 20, 7, 9, -16, -7, 2, -13, 2, -1, 1, -1, 1, 0, 15, 5, 17, -7, 8, 0, 6, -9, -7, 6, 11, -2, 4, 19, 3, -18, -1, 1, -9, 2, -9, 13, -13, -3, 5, 3, 
  -7, -10, -4, 7, -4, 0, 8, -2, 2, 2, 1, 6, -12, -11, 1, 1, -10, 6, -13, -8, -5, -2, -3, 2, 2, -18, 3, 0, -9, -10, 7, -8, 0, 8, -14, -1, 3, -11, -6, 4, 8, -5, 1, -8, -4, 4, 0, -1, 3, 2, -3, -6, 4, 1, -1, 8, -8, 8, -10, -6, -2, 0, -5, -1, -13, -9, -12, 6, 6, -2, -11, -3, 4, 2, -3, -13, -5, -2, -10, -11, 2, -1, -3, 8, 5, -6, 0, 5, 1, 2, -15, 20, -2, -1, -3, -14, -6, 8, -5, 1, -2, -9, 0, -9, -5, 2, -8, -2, -3, -1, -6, -9, -4, -10, -9, -3, 1, 7, 5, -10, -2, 0, -10, -13, 1, 4, 0, -6, -9, 7, -21, 3, -5, -10, -9, 0, -9, 3, -5, -8, -13, -10, -2, -1, 2, -6, 2, 9, -5, -3, -1, -4, -5, 1, 2, -12, -2, -7, 1, -4, 0, -3, -6, 4, 5, -5, 4, 7, -3, -1, 5, -7, -4, 6, -4, 9, -4, 4, -7, -2, -5, 4, -1, 9, 3, -7, 0, 1, 4, -5, 7, -7, -3, -10, -6, -8, -5, 1, 5, 7, 9, 3, 6, -11, -11, 2, -14, -4, 6, -1, -8, -4, 3, -12, -4, 2, -3, 1, -8, 13, 8, 4, -5, -8, 
  -10, -16, -8, 12, 0, -15, -30, 3, 2, -3, 2, -12, -13, -16, 5, 8, -4, -15, -2, 10, -14, 2, 10, -10, -3, -19, -6, 9, -1, -3, -20, -10, -9, -28, -1, 7, -10, -7, -11, -8, -6, -7, 6, 2, -10, -1, 1, -5, -6, -6, -13, -2, -8, -9, -15, -3, -12, -15, -10, 11, 8, -9, -17, -15, 4, -7, 3, -9, 5, 1, -27, -9, 12, -19, 1, -9, -26, -15, -20, -8, -6, 12, -11, -21, -19, -6, 4, -2, 1, -6, -28, 12, -10, -5, -10, -23, -7, -4, -3, 26, -1, -21, 2, -10, 12, -13, -9, -11, 6, -7, -6, -5, -11, 0, -3, 1, -14, -17, -4, 0, -15, -3, -11, 19, 5, -11, -7, -8, -8, -5, 9, 1, 3, -4, -2, 7, 10, -2, -6, -1, -30, -15, -7, 1, -2, -3, -3, 5, -14, 1, -7, -5, -1, -3, 6, -3, -12, -7, -6, -10, -2, -18, 8, -5, -8, -14, -16, 0, -3, -10, 1, -10, 0, -19, -11, 21, -7, -16, -16, 3, -17, -5, 6, -4, -14, -1, -4, -7, -9, -5, -17, -26, -16, -8, 11, -4, -2, -24, -6, 4, -9, -9, 6, -32, -4, -21, 7, 8, -7, -6, -15, 9, -5, -21, 12, 8, -1, -7, -17, -1, -1, -3, -16, -28, 
  -15, 4, -16, 6, -12, 3, -1, -9, -3, -9, -21, 1, -2, 8, 2, -6, -3, 10, 3, -10, 11, -5, 6, 5, 0, -11, 2, -15, -5, 3, -1, -1, -12, -7, -22, -9, -5, -7, -4, -6, -5, 5, -7, -6, -7, 0, 7, 6, -3, 6, -5, 1, 0, -1, -4, 3, -2, -8, -5, 8, 2, -3, -5, -7, 3, -2, -1, -12, -15, -3, -3, 7, 4, -4, -5, 5, 2, -2, 5, -11, -4, -9, 0, 1, -4, 0, -7, 9, -4, 0, 10, 16, 3, -4, 0, -4, 2, -12, 8, -10, 3, 2, -17, 2, -8, -2, -1, -1, -7, -12, 7, -8, 1, 2, -3, -8, -8, -3, -2, -7, -11, -5, -8, -10, 2, -7, 5, -2, -8, -9, -8, 4, 9, 1, 8, -6, -19, 1, -17, -5, 1, 5, 1, 3, -3, 6, 8, 3, -8, 8, 2, 2, 7, 0, -9, -5, 9, -8, -2, 1, -3, -7, -12, 4, 2, -4, -4, 5, -1, 5, 2, -6, -10, 6, 5, 9, -11, 2, -10, -4, -7, -2, 3, -8, -11, 5, -7, -3, -9, 0, 0, 4, -10, 8, -3, -2, 7, -2, -11, 0, 17, -2, 6, -7, 2, -11, -10, 10, -1, 6, 5, -24, 6, 6, -15, 8, 2, 7, 4, 0, -9, -8, -15, -6, 
  -8, -5, -13, -3, -6, -8, 7, 6, -7, -1, 8, -5, -5, -2, -4, -10, -5, 4, -1, 1, -5, 0, 7, 7, 6, -9, -7, 2, -9, -4, -12, -16, -10, 0, -5, -3, 9, -2, -3, -6, -7, -12, 7, -1, 3, -6, 4, 3, -4, -11, -11, -16, -1, 1, -11, -6, -7, -6, -8, -3, 4, -8, -14, 1, -13, 1, -1, 6, 8, 0, -8, -13, -4, -10, 0, -10, -8, -12, 0, -3, 5, 7, -12, 4, -2, -1, 3, -10, -2, 4, -6, -3, 0, -3, 6, -6, -11, -9, 6, 4, -8, 1, -6, -8, 8, -3, 1, -14, -15, 0, 7, 1, 1, 1, 2, -3, -7, 1, -6, -11, -3, 4, -5, -2, 1, -12, 1, -10, -7, 0, -2, -10, -8, -5, 2, -11, -2, 7, -6, 4, -14, -1, -8, 5, 4, -10, -14, -9, -10, 6, 4, -11, -3, 9, -8, -9, 1, -11, 3, 4, -2, -7, 4, -14, 9, -2, -6, -6, 2, -4, -12, -2, 1, -2, 1, -5, 2, 1, -5, 4, -7, 7, -7, 4, 3, -5, -8, 0, 0, -9, 4, 3, -13, -7, 0, -2, 6, -11, -11, -6, -10, 2, 9, 3, -9, -1, -10, -1, 1, -7, -2, -1, -6, 0, 0, -4, 2, -4, -11, -4, -4, 6, -11, -7, 
  -2, 1, -14, 21, 2, 6, 15, 10, 7, 21, 1, 6, 5, 6, -10, -16, 3, 4, -4, 17, -11, 0, 9, -4, 0, 3, 1, -22, 0, 5, 12, 16, -23, 4, -36, 14, -28, 17, 1, -20, -13, 16, 4, 7, 11, 11, 17, -1, -6, -7, -6, 24, -1, -2, -5, 7, 14, -10, -3, -28, 6, 3, 14, 11, -21, 1, -32, -10, 4, 13, 4, 11, 30, 32, 20, 7, -1, -4, 1, -10, 0, 4, 18, 6, 14, 19, 4, 5, 1, 6, 2, -12, -6, 9, 6, 7, -23, 1, -23, 9, 10, 0, 0, 3, 3, 19, -15, 19, 16, 2, 2, -5, 4, 8, 13, -2, -5, 1, -10, 7, 8, 28, -20, -15, -3, -1, 5, 5, -32, -11, -24, 4, 5, 13, 25, -15, 9, -14, 20, 8, 3, 3, -7, 0, -9, 0, 8, 11, 23, 17, -8, -2, 12, 17, 22, 4, -10, 5, -9, 13, 2, 0, -24, -28, 11, 18, -25, 3, -12, 17, 4, -10, 4, 2, -2, 39, -2, 6, 8, 24, 7, 17, 6, -9, 10, -2, 3, -2, -3, 3, 4, 6, -7, -1, -8, 14, 22, 6, -18, -20, 24, 12, 13, 9, 2, 26, -3, 29, -2, -3, -11, -18, -4, 2, 5, 2, 17, 0, 3, 22, 28, -7, -17, -4, 
  7, -16, -10, 27, -27, 12, 4, 3, 12, -15, -37, -10, 4, 7, 7, -8, 3, -3, 2, 6, -8, 2, 22, 3, -4, -1, 10, -6, 8, -4, 3, -5, -11, 20, -29, 38, -5, -1, 15, -11, -2, 30, 2, 7, 21, -1, 16, 21, -5, -5, -5, 31, 4, 0, 5, 14, 9, -17, -1, 20, -2, -6, 13, 21, -12, 12, 0, -15, 2, 14, 2, 12, 16, 23, 34, 10, 17, 2, 9, 7, 18, 1, 22, 5, 11, 18, 3, 6, 14, 27, -5, 3, -7, 12, 16, 0, -15, 3, -21, -1, -4, 8, -9, 0, -3, 13, 8, 18, 20, 0, 9, -5, 7, 1, 4, 6, 8, 8, -12, 1, 1, 36, -24, -39, 2, -7, 8, 5, -36, -6, -46, 3, 18, 31, 21, -15, -12, -1, 31, 9, 9, 10, 8, -7, 11, 6, 12, 2, 28, 4, -3, -2, -1, 15, 12, -1, -15, 10, 5, 15, -7, -1, -21, 16, 4, 15, -7, -5, -12, 23, 0, 9, 10, 9, 8, 27, -14, 0, 11, 22, 20, 14, 9, -6, 7, 16, 5, 11, 9, -3, 28, 16, -21, 1, -29, 30, 20, 5, -13, -16, 16, 34, 25, 34, 5, 32, 3, 37, 0, -6, 6, -33, -3, 6, -8, 2, 14, 13, -5, -12, 17, -6, -6, 1, 
  -17, -11, -4, 1, -5, 13, 14, -1, -8, 5, -16, -14, -8, 9, 5, 5, 13, -2, 1, 3, -2, -10, 6, -2, 1, -10, 1, -1, -9, -9, 6, -9, -11, 4, -27, 6, -14, -15, -6, 4, -4, -5, -6, 0, 5, -5, -5, 6, 3, 4, -6, 12, 2, -5, -8, -4, 8, 3, -1, 23, 0, -5, 4, 5, -5, -13, -15, -6, -14, 0, 8, 5, -15, 6, 6, 9, -12, -7, -10, 3, -2, -7, 0, -4, 4, 0, -1, -5, 0, 5, -7, -1, 1, 12, -5, 9, -9, -3, -13, 3, 4, -10, -4, -6, 10, -6, -7, -8, 8, 1, -6, -12, 1, 1, -1, -4, -4, -4, -7, 2, -8, -5, 3, -2, -2, 1, 6, -6, -8, -11, -26, 2, 8, -9, 2, 10, -15, 8, -34, 6, -12, -3, 2, 6, 10, 8, 9, -4, -4, -2, -4, 10, -3, 14, 10, -5, 6, 1, -11, 13, -11, -9, -29, -7, 1, -3, -18, -3, -8, 15, -11, -11, -12, 11, 9, 13, -7, 12, 10, -13, 6, 8, -7, -7, 3, 1, 5, 0, -8, 1, 4, 4, -12, -10, -25, 10, -1, -10, -16, -10, 0, -8, -20, 3, -2, -7, -7, 4, 0, 2, -8, -23, 5, -3, 2, -1, 5, -5, -4, 27, 4, -11, -16, -13, 
  -6, -6, -3, -17, 4, -5, -11, -5, 2, 2, 2, -4, 0, -13, -7, 9, 4, 0, -6, -3, -7, -15, -8, -8, 5, 6, -3, 1, 7, -1, 0, -16, -29, -4, 8, -5, -2, -1, 3, -4, 2, -13, -5, -2, 4, -2, -11, -6, -9, -5, 3, -10, -11, -14, 3, 2, -11, -6, -2, 3, -7, 6, -13, -36, -16, 2, 26, -5, 0, -18, -11, -4, -3, -14, -3, 4, -8, -15, 4, -7, -1, 2, -7, 2, -8, -3, -20, -6, 1, -5, 5, -29, -11, -16, -16, 6, -11, -7, 8, -5, -1, -16, -6, -10, 4, 3, 6, -15, -2, -14, 14, -17, -4, -11, 1, -5, -23, -10, 3, -6, -1, 4, -10, 5, -10, -10, -11, -16, -2, -10, 1, -1, -5, -31, -21, 3, -15, -8, 6, 0, -5, -19, -4, -8, 1, 7, -11, 3, -8, -14, -7, -9, -3, 2, -9, -1, -8, -10, -16, -24, -17, -16, 4, 5, -12, -4, -23, -1, -18, -14, -7, -3, -7, -6, -21, 13, -3, -2, -16, 0, -6, -23, -18, -1, 3, -6, -1, -17, -12, -8, -8, 25, -11, -22, -10, -12, -7, -4, -8, -8, -9, -7, 1, -14, -5, -19, -13, -25, -4, -3, -2, -4, -8, -37, 0, 2, -14, 7, -12, -14, 0, 8, -11, -13, 
  -6, -13, -13, 29, -15, -5, 6, -1, 12, 11, -20, -9, -1, 0, 14, -6, 16, 4, 6, -12, 5, 5, 9, -6, 7, -5, -3, -4, 4, 2, 4, 4, -10, 6, -16, 0, -8, 0, 8, 6, -18, 2, -22, -12, 10, 4, 3, 1, -11, -3, -8, 16, -13, 14, -5, -1, 0, -12, -7, -8, -11, -6, -3, -2, -5, -5, -20, -15, -17, -7, 12, -10, 1, 14, -17, -5, -8, 2, -1, -2, 4, 8, 0, -6, -1, 2, 16, -4, 8, 5, 4, -4, 1, 3, -7, -5, -18, -6, 2, 3, 2, 2, -9, -6, 11, 0, -7, 2, -1, 6, 1, -13, -9, -2, 7, -4, -5, -10, -14, -4, 3, -9, -6, -4, -4, -10, 4, 6, -5, -9, -15, -7, 11, 7, -5, 3, -10, -3, -9, -4, -19, -4, 3, -9, 4, 3, 9, -20, 5, 6, 3, -1, 5, -13, 6, 0, 11, -6, -3, 1, -12, -1, -28, -2, -9, 0, -12, 2, -1, -2, -5, 4, -7, -4, -4, 12, 6, -3, 4, 9, -7, 3, 1, 2, 2, -13, -5, 4, 12, -8, 5, 0, -14, 3, -4, -9, 5, -4, -9, -6, 16, 18, -16, 0, -16, -9, -6, 3, -4, -11, -7, -33, -3, -12, -4, -5, 7, 10, 7, 0, 13, -1, -2, -8, 
  1, -5, -4, 16, 10, -9, -8, 6, 8, 18, -10, -17, -14, -11, -16, 2, 5, -18, -14, -18, 1, -11, 10, -8, 3, -9, 5, -9, -13, -20, -8, -5, -4, 7, -10, 3, 18, -5, 4, 5, -5, 13, -16, -14, 13, -2, 2, 1, -3, -19, -10, -3, 11, 1, 16, -16, -1, 3, -6, -9, 1, -5, 10, 9, -1, 0, 5, -3, 7, -6, -3, -4, 3, 0, -20, -1, -2, -1, 18, -13, -20, -13, -12, 2, 11, 0, -14, -8, -2, -6, -17, 0, 6, 4, -5, 10, 0, -4, -10, 0, 0, -18, 6, 4, 7, -8, -15, -20, -7, -3, -11, -21, 7, -2, -8, 5, 2, -20, -19, -1, -7, 13, -8, -18, 0, 6, -8, 10, -20, -13, -26, -17, 5, 4, -5, 1, -19, -9, -28, -5, -21, 2, -10, 11, -4, -10, -4, 3, -1, 2, -8, 0, -14, -12, -9, 11, -16, 8, -9, 4, -11, -2, -11, 3, 7, 5, -4, -9, 5, 5, -11, 16, -1, -2, -20, -4, 1, 0, -14, 14, 11, -4, 20, -1, -10, -40, -9, -24, -9, 8, 7, 16, 4, -2, -1, 4, 10, -17, -2, 3, 14, 14, -26, -7, -12, 0, -30, -13, 14, -7, -10, -12, -14, 7, 18, 9, -14, -10, -22, 27, 14, 11, -7, 15, 
  -9, -16, -1, -7, -10, -5, -3, -12, 2, -12, -5, 0, -8, -1, 5, -4, 2, -6, 4, -8, -13, -9, -6, 4, -4, 8, -1, -4, -8, -2, -6, -4, 3, -8, -14, -3, -13, 3, -11, 3, -1, 4, 0, -8, -13, -11, -3, 3, 1, -12, 1, 1, -4, -14, 0, -5, -5, -2, -1, -1, -5, 5, -12, 2, -9, -9, -9, 6, 2, -6, -8, -8, -4, -6, 3, -3, -1, 5, 3, 1, 0, 3, 3, 2, -4, -1, 4, 3, 1, -8, 5, -2, -8, 6, 3, -20, -12, -11, -2, -9, 9, -3, -4, -11, -6, -7, -2, -8, 5, -7, 0, -11, 1, 1, -5, 2, -10, -8, -8, -7, 7, 9, -12, -1, -12, -9, -1, -8, -7, 3, -14, 7, 7, 3, 0, -1, -5, -10, -7, -13, -6, -12, -3, -2, -5, -6, 0, -1, 5, 3, -10, -12, 3, 7, 3, -5, -1, 6, 3, -11, -4, -13, 2, 5, 8, 1, 0, -5, 3, -10, -9, -12, -2, 1, 0, 5, -2, -1, -2, 3, 5, -3, 1, -6, 0, 6, -5, -5, 2, 2, -8, -8, -18, -11, -13, -10, -9, -7, 2, -7, -5, -12, -9, 3, -3, -7, -4, -4, 7, 8, -11, 2, -5, -10, 1, -4, 4, -4, -11, 7, 8, -6, -6, 1, 
  -21, -8, -25, 3, -3, 18, 4, 2, -2, 27, -65, 4, 12, 0, 2, -18, -9, 1, 3, 18, -3, 3, -10, -1, -6, -29, 2, -13, -3, 5, -10, 13, -15, -4, -35, 9, -42, 12, -15, 8, -15, 18, -79, -9, 8, 12, -7, 19, -6, -10, 27, 12, 6, 9, -3, -7, -9, -54, 5, -7, -3, -9, 7, 19, -47, 14, -32, 3, 2, -4, -10, 7, 30, 9, -3, 19, 11, -3, -2, 13, -2, -3, 27, 4, 13, 12, 10, -6, 1, 9, -1, -3, -6, 2, 10, 4, -7, 16, -20, 3, -17, -3, 1, 4, 31, 19, -47, -5, 2, -2, 19, 5, -6, -10, 15, -18, -4, -20, 5, 8, 3, 2, -2, 20, 10, 8, -14, -10, 18, -13, 21, 28, -45, 4, -4, -5, -17, -17, -103, 8, -19, -2, -2, -16, 3, 6, -27, 1, 3, -11, -10, 4, -5, -12, -2, 38, -16, 5, -12, 8, -19, -13, 4, 18, 11, -2, -6, 7, -14, 0, -22, -26, -9, -5, 9, 16, -8, -3, 6, -1, 8, -14, -7, -6, 5, -11, -10, -11, -15, -2, -6, -23, -21, 1, -47, 4, -14, 6, -17, -3, -7, 0, -29, -3, -18, 3, -8, -17, 6, 5, 3, -31, -10, -14, -5, 9, 5, -10, -8, 1, 0, 8, -7, -8, 
  2, -2, 1, -5, 17, -2, -4, 0, 7, 2, 4, -13, -13, -10, 2, -4, -9, 0, -15, 1, 3, -8, -9, 4, 0, -9, -6, 2, -2, 2, -17, -10, 8, -5, -2, -6, 0, -7, -15, 4, -12, -17, -4, -1, -11, -11, 6, -6, 3, -5, -7, -5, 0, -14, -10, 1, -1, 3, 5, -11, -12, -5, 1, -15, -20, -5, 2, -8, -6, -3, -3, -13, -2, -5, 5, -2, -4, -5, -4, -6, 2, 5, -1, -8, 0, -8, -10, 1, 2, 7, -8, -8, 6, -11, -14, -9, 4, -4, 0, -14, 12, -5, -10, -11, 8, -4, 4, -2, -18, -11, 4, 4, -6, -9, -12, -5, -11, -8, -5, -11, 0, -4, -8, -6, -7, 0, -17, -13, -8, -3, -7, 12, 4, -12, -2, 2, 20, -2, -5, 6, -8, -14, -6, 4, 7, -4, -4, -7, -21, 7, 4, 5, -10, -2, -2, -6, -2, -14, -13, -4, -5, -17, 12, -2, -3, 0, -8, -8, 5, -9, 3, 0, -7, -5, -11, -6, 6, -11, -14, -7, -11, -7, 14, 9, -1, -16, 0, -6, 6, 9, -1, 12, -2, -17, 3, -2, 0, 0, 2, 2, -9, -5, 5, -12, 10, -2, -6, -10, 6, -6, -7, 16, -7, -11, 33, -7, 0, 8, -5, -14, 8, 19, 3, 3, 
  -10, -1, -2, 4, 3, -2, -9, -3, -6, -2, -9, -10, 6, 8, -1, -8, -8, -1, -10, 0, 5, -9, -7, -6, 3, -3, -3, -3, -1, -1, -2, -8, -3, 3, -4, -8, -8, 6, -6, -7, -8, 2, -1, -3, -7, 2, -6, -4, 1, 1, 7, -8, -1, 7, -9, -2, -3, -1, -8, -1, 2, 1, -6, -4, -1, 7, -13, -5, -5, 2, -2, 7, -1, -3, -8, 2, -10, -7, 10, -5, 5, -9, 2, 0, -13, -11, -2, 8, 1, -7, -6, 2, 6, -2, 5, -13, -8, -9, -9, 5, -9, 0, 0, 1, 10, 5, -9, 6, 4, -8, -10, 5, -4, 1, -8, 7, -7, -10, 9, 2, 2, 4, -2, 5, 2, 1, -9, -6, 0, -2, -8, -3, -9, -1, 4, 1, -7, -1, -2, -7, -1, 3, -1, 8, -2, -3, -5, -1, -3, -6, -9, 8, 3, -8, -1, -6, -9, 2, -3, -5, -18, 1, -10, -4, -26, 7, -17, -6, -2, -3, -18, -6, 3, 2, -1, -6, 10, -2, -1, 7, 6, -3, -2, -3, -9, -7, -1, -3, -9, 2, -11, -1, -6, -9, -18, -4, -15, 3, 2, -3, 2, 8, -14, -10, 4, 2, -6, -10, -10, 6, -3, -12, 7, -12, 2, 2, -7, -6, 2, 4, 2, -10, -5, -3, 
  43, -4, 48, -33, 22, -28, 38, 0, -14, -7, -9, -35, -31, -29, 17, -16, -10, -15, 8, -25, -17, -24, -5, -1, 42, 10, -28, 12, -11, -4, -11, -32, 25, -19, 12, -39, 6, -61, -33, -18, -9, -37, -11, -17, -39, -29, 4, -14, -22, 22, -16, -41, -35, -22, 1, -4, 18, -4, -13, 20, 6, -8, -42, -31, 1, -23, 0, -8, -19, 11, -7, -26, -5, -28, -32, 2, -61, -20, -9, 18, -4, 7, -38, 6, -5, -6, -10, 10, 6, -1, -1, -26, 11, -10, -38, -5, 4, -12, 8, 9, 2, -13, -18, -2, -7, -26, -3, -30, -19, 6, -2, -15, -12, -18, 19, -11, -12, -31, -6, 0, -10, -18, 13, 1, 9, -10, -26, -2, 20, -9, 16, -7, -8, -18, -27, 0, -4, -34, 18, -13, -30, -43, 2, 13, -14, -18, 1, -15, -27, -14, -10, -9, -8, 1, -14, -16, 11, -4, 13, -13, 6, 8, -2, 3, 19, 4, -1, -1, -25, -25, -13, 1, -5, -6, -6, 6, 7, -15, -2, 24, -7, 8, -6, 10, -4, -33, -25, -5, 17, -3, -18, -11, 28, -1, 4, 5, -7, 17, 39, 11, 0, -22, -49, 4, 8, -5, 2, 30, -3, -21, 11, 25, 4, -8, 35, -1, -18, 13, 10, 25, -7, -15, 10, 15, 
  0, -2, -12, -7, 4, -10, -3, 6, -1, -9, -10, 6, -9, -8, -4, 3, 4, 5, 6, 0, 0, -8, 7, -8, -3, -7, -10, 4, -10, 6, -12, -2, -6, -12, -8, -2, -10, 2, 1, -9, -2, -2, -9, 3, 0, -10, -6, 7, 2, -4, -12, -4, -9, -9, -7, -11, 0, 4, -10, -9, 6, -12, -4, 6, 1, 6, -7, -10, -6, 3, 6, 6, -2, -4, 5, -5, -14, 6, -7, -8, 7, -10, -13, 6, -13, -6, 7, 6, -3, -4, -9, 2, -12, -12, -10, -12, -8, -3, -10, 6, -7, -12, 1, 3, -2, -2, -12, 4, -10, -8, 7, -7, 6, 3, -1, -4, -6, -2, 5, 3, -9, 1, 1, 3, -1, -2, 1, 2, -8, 3, 2, -9, -7, -8, 0, 4, -7, 3, -9, -11, -3, 1, -5, -11, 3, -4, -8, 3, -4, 5, -6, 3, 3, -1, 5, 0, -3, -6, -3, -8, -11, 4, 7, 0, 0, -12, -12, -1, 0, -1, 5, 6, 1, 4, -10, 1, 7, -10, -4, 1, 2, -7, 0, -8, -5, 5, -4, -5, 6, -6, 2, -6, -2, -3, -18, 5, 3, 2, 7, -11, 4, -2, -9, -8, 4, -6, -8, -10, 2, 7, -10, 1, 3, 2, 1, -9, -1, 2, -9, 7, -6, -1, -13, -3, 
  -15, 10, -4, 14, -11, 0, -8, -11, 3, 1, -24, 0, 8, 5, -1, -10, 8, -1, -1, -2, 11, -6, 1, -1, 14, 1, 5, 9, 0, 2, -1, -15, -11, -2, -3, 11, -16, 8, 5, -7, -13, -2, -27, -4, 2, -1, 6, 14, -9, 6, 0, 15, 2, 0, -12, -1, -5, -6, -11, 33, 3, -10, -2, 5, -8, -5, -16, -10, -14, -5, 8, 2, 2, 10, -17, -6, -11, -5, -7, -1, 1, -4, -1, -16, 4, 7, 0, 6, 0, 2, 9, -1, 8, 6, -4, -16, -8, -6, -1, -5, 4, -1, -4, 0, 2, -4, 2, 4, -7, 8, -1, -11, -8, 10, -1, -2, -1, 2, -9, 2, -15, -14, -5, -13, 5, 5, -3, 12, -15, -8, -26, -7, 1, 6, 9, 6, -9, 9, -24, -14, -6, -1, 11, -12, -4, 2, -5, 0, 6, 1, -7, 4, 1, 0, 2, -9, -9, 9, -15, 0, -13, -12, -33, 8, 0, -9, -7, 2, 2, 5, -11, -5, 0, 0, -9, 0, -2, 7, 4, 6, -9, -2, -1, 6, -3, 6, -8, 12, 11, -8, -18, 9, -5, 3, -11, -8, 11, 1, -7, -7, 11, -8, -2, 10, -13, 6, -9, 17, -11, -5, -16, -26, 4, -13, 2, -4, 2, -10, -1, 15, -3, -4, -12, -10, 
  -2, -12, -6, -3, -3, -3, 3, 1, 11, -4, -7, 4, -8, -7, -6, 4, -2, 6, -1, 0, -8, 6, -3, 0, -8, 5, 6, -4, 9, -2, 6, -7, -7, -1, -1, 2, -9, -10, 0, 5, -6, -8, -14, -4, 7, -10, -3, -11, -5, 6, -3, 6, -1, -8, 5, -2, -1, -5, -8, -2, 6, 5, -6, 0, 2, -1, -21, -12, 1, 7, 4, 6, 5, -8, -9, -4, 6, -5, 7, 0, -10, -1, -11, 0, -1, -6, 10, 9, 6, 4, -4, 2, 9, 5, -7, 1, -5, -10, 2, -7, 3, -5, 2, 9, 9, 5, 3, -1, 1, 5, -2, 2, 9, 16, 7, -1, 8, -8, 8, 13, -10, -6, -9, -7, -3, 3, -8, -10, -15, 1, -7, -12, 0, -9, 1, 7, -1, -3, -5, -5, 1, 6, -4, -6, 4, -1, -4, 3, 4, -6, 9, 6, -8, -6, -9, -23, 7, 0, 3, -9, -10, 1, -4, -10, -1, -1, -3, -8, -9, 9, -11, 5, -10, -3, -6, 4, -8, 12, -5, 4, 6, 1, 4, 6, 1, -12, -1, 1, -8, -6, 3, -6, -8, 9, -3, -9, -7, -2, 6, 7, 11, -11, 1, -10, 1, -2, -1, -7, -10, -5, -5, -6, -4, -9, 2, 0, 6, 4, 4, -6, -1, 7, -11, -2, 
  2, 0, 18, -14, 4, -16, -17, -9, -21, 20, -13, -33, -30, -37, -21, -15, -12, -2, -30, -45, -20, -28, 18, 3, -7, 4, -12, 46, -2, 0, -23, -40, 2, 9, -6, -24, 32, -27, -3, -12, 33, 1, 2, -56, -27, -25, 17, -19, 48, 8, -19, -25, 8, -51, 9, -8, 5, 10, 0, 8, -11, 7, -8, -32, -17, -24, 9, -31, 25, -21, -19, 11, 11, -12, 7, -29, -55, -25, -1, -14, 11, 48, -54, -9, -30, -24, -2, -1, -12, 12, -1, -40, 13, -2, -46, -39, 9, -14, 5, -1, 33, -17, -4, 13, 16, 6, -16, 3, -26, 4, -2, 11, 5, -10, -22, -20, -15, -12, 30, 10, -10, 7, -3, -21, 21, 6, -7, -22, 10, 26, -19, 20, 20, -4, 0, 13, 6, 3, -19, 13, 11, -12, -17, -24, 12, -10, -13, -2, -1, 3, -31, -8, -16, 7, -14, -16, 10, -20, -1, -4, 0, -25, 0, -19, 23, -29, 22, 14, 1, -2, 10, -32, -29, -14, 6, -30, 33, 21, -44, -23, -6, -37, -10, 4, -15, 15, -10, -6, -5, 24, -6, -14, 14, -50, -2, -7, 12, -22, -13, -4, 13, -22, -6, -7, -20, -27, 5, 18, 17, -7, -20, 22, 10, -40, 35, 5, -2, 9, -4, -2, -6, -8, -10, -13, 
  -15, -3, -18, -7, -9, 0, 1, -4, -9, -5, -2, -16, 3, 11, -8, -8, -4, 5, -11, 3, 6, -1, 7, 5, 2, -8, -6, 24, -4, 1, 1, 8, 2, 2, 3, -5, 5, -10, 0, -4, -7, 0, -13, 2, -11, -3, 0, -4, -14, -3, -2, -10, -8, 2, -1, 2, 4, 4, 5, -16, -3, -7, -3, 2, -8, -16, -30, -4, -5, -5, -2, -11, -5, 5, -10, -6, 5, -4, -3, -10, 3, 13, 10, -4, -8, -1, -9, -4, 5, -2, -3, -11, -2, 9, 5, 2, -21, 7, -12, 2, -1, -7, 1, -7, 5, -9, -17, -11, 8, -8, 2, 3, -16, 11, -5, -1, -7, 3, 10, 10, -3, -8, -9, -1, 4, -6, -10, 2, -24, -14, 0, 4, -7, -3, 0, 5, 6, 1, -5, -5, -4, 8, -2, 3, 2, 17, -10, -18, -3, -11, 6, -8, -5, -2, -6, 13, -9, 3, -9, -18, -4, -3, 16, 3, 18, -3, -10, -5, 14, 0, 6, -15, -16, 7, -9, -4, -3, 0, -9, -11, -11, -5, -4, -10, -4, 5, 10, 31, 1, -1, -17, -19, -16, 4, 7, -3, 2, -5, -7, 1, 4, 7, -8, 5, -11, -5, 2, 3, 9, 0, -16, -3, 8, 8, 6, -4, 6, 0, -8, -2, 1, 7, -2, -24, 
  6, 3, 13, 6, 9, -14, 0, -4, -11, 9, 0, -3, -16, -13, 6, -11, 4, -10, 0, -8, -3, 5, -5, 9, -2, -9, -7, 13, 10, 5, -8, -13, -10, -8, -6, -5, 1, 1, 6, 2, -11, 0, 5, -21, -19, -16, -4, -16, 3, -1, 4, 2, -4, -17, 0, -6, -4, -12, -10, 1, 2, 1, -2, -2, 1, -10, -2, -12, 4, -12, -15, -9, 2, -5, -1, -5, -25, -20, -11, -13, -7, 2, -9, -8, -5, -12, 6, 10, -11, -8, 4, -20, 6, 0, -18, -5, 1, -3, 1, 2, 17, -7, -12, -4, -9, 6, 4, -24, -17, -17, -6, -13, -3, 6, -3, -10, -19, -20, 1, 3, -5, 8, 3, -10, -6, 1, -15, 0, -13, -17, -4, 6, -7, -12, -7, 1, 1, -10, 7, 3, -5, -14, -2, -16, 10, 0, -13, -6, 1, -11, 1, -5, -13, -6, -12, -18, -1, 4, -11, -14, 5, -4, -12, 12, 0, -19, 5, -9, -6, -6, -9, -17, 0, 6, -1, -9, -8, 9, 2, -10, -8, -4, -2, 4, -1, 11, -1, 15, -1, -12, -15, 8, 5, -2, -2, -6, 12, -3, -4, -7, 12, -11, 6, -13, -15, -8, 5, 2, -3, 1, -11, 6, -12, -15, 31, -11, 6, 7, -12, 11, 15, -4, -2, -1, 
  -18, -5, -6, 4, -7, -7, -5, 5, -11, -10, 6, -15, 10, -23, 2, 0, -4, 5, -18, -2, -7, -14, -6, -12, -4, 2, -6, -15, -12, -8, -8, -9, -6, 0, -4, -11, 1, 1, -9, -11, 4, 7, -5, -12, 0, -10, 0, -1, -4, 2, 2, -4, -8, -15, -1, -3, -11, 5, -4, -6, -10, -10, -12, 1, 0, -10, -9, -1, 0, -16, -13, 5, -17, -2, 0, -19, -2, 2, -4, -5, -1, -10, -9, -16, -17, 0, 9, -10, -15, -10, 3, -12, -11, -11, -10, 2, -15, 5, 2, -9, 2, -13, -4, -4, -2, -4, -5, 5, -13, -10, 5, 6, 7, -12, 2, -10, 6, -11, 4, -8, 3, -3, 4, -7, 4, -7, 6, 2, -12, -6, -5, -15, -11, 5, -14, 7, -10, 5, -1, -16, 5, -16, -20, -13, -1, -10, 1, -16, 8, 3, -9, -9, -4, -5, 10, 3, -10, -2, -1, 10, -10, -1, -13, -24, 3, 7, -2, 7, -13, -4, 1, 0, -3, -7, -2, 9, 7, 4, -8, -10, -16, -15, -3, -11, -10, -5, -5, -11, 1, -1, -18, 2, -15, 0, -5, 6, 3, 4, -6, -12, -14, 7, 0, -17, -26, -6, 3, -12, 5, 5, -28, -18, 6, 5, -2, -5, 0, -9, -10, -11, -11, 0, -7, -4, 
  28, 12, 35, -9, 20, -27, 16, 12, -41, 5, 7, -30, -1, -19, -23, -5, -10, -1, 10, 8, 16, -17, -6, 8, 27, 5, -14, 33, -9, -2, -26, -28, 13, -1, 23, -9, 10, -38, -10, -24, -12, -8, -3, -36, -9, -26, -11, -28, 23, 14, -25, -37, -8, -23, -5, 4, 14, 0, -4, 31, -14, -1, -16, -19, -1, -29, 9, -17, 5, -12, -17, -7, 5, -33, 4, -24, -47, -15, -22, -19, 0, 11, -48, -5, -17, -10, -8, 10, 7, 18, 0, -7, 8, -20, -29, -25, 20, -21, 14, 1, -6, -22, -9, 22, -25, 52, -48, -13, -29, -5, -16, 9, -5, -7, -7, 42, -4, -33, 42, -4, -14, -6, 0, 2, 38, -8, 8, -11, 8, -3, -2, -5, 3, 0, 4, 22, 8, -14, -13, 33, -17, -25, -16, -12, 6, -22, -4, -8, -16, -20, 5, -2, -9, -4, -17, -18, 15, -6, 9, -11, 10, 12, -5, 43, 31, -22, -31, 3, 9, 6, 2, -23, 1, 8, 18, -29, 3, 2, -31, 7, 5, -32, -11, 15, -21, 4, -1, 3, -7, -7, -18, -28, 15, -30, 5, -14, 19, -26, 4, 2, -3, 3, -5, 5, -36, -36, 24, 23, -7, -12, 10, 37, -2, -36, 23, -6, -16, 8, -3, 2, -14, -18, -7, -5, 
  3, 8, -29, 12, -21, 11, 29, 14, 9, 16, -65, 6, 14, 17, -2, -6, 7, -5, 5, -4, -3, 6, 6, 3, -2, -17, 9, 14, 1, 7, -9, 3, -11, 1, -41, 14, -28, 5, 13, -16, -20, 5, -13, -8, 0, -4, 9, 4, 2, 7, 5, 24, 4, -2, -7, 14, 18, -8, -16, -3, -13, -7, 2, 19, 9, -6, -1, -10, -23, 2, 12, -19, 18, 11, -25, 11, -1, -1, 3, 3, -3, -8, 6, 7, 6, -2, -5, 1, 8, 6, -5, 1, -9, 9, 11, -10, 4, 2, -1, -9, -11, 1, 6, 2, 7, -4, -21, -6, -8, 1, 6, -16, 6, 3, -8, -3, 7, 0, -7, -3, 8, 0, -16, 3, -10, -5, -4, 4, -12, -10, -15, -27, -15, 3, 7, -5, -11, -22, -58, -11, -15, -8, -8, -16, -11, 6, 2, -3, 7, 6, -6, 9, -5, -13, -11, 37, -12, -1, -14, -9, -22, -16, -18, -20, -17, -1, -15, -11, -20, 2, -4, -1, -16, -7, -10, 12, -2, 7, 4, 7, -2, 22, 0, -4, 4, -1, -6, 2, -2, -1, 5, -5, -16, 6, -31, -6, 10, -11, -17, -13, 8, 11, -9, 7, -12, -1, -4, -14, -11, -12, -4, -44, -13, -2, 6, 3, -10, -5, 10, 4, 11, -3, 1, -7, 
  -13, -12, -17, -3, 0, 12, -1, -2, 2, -11, -11, -12, -1, 1, -4, 2, -8, 4, -10, 1, 0, 6, -4, -2, -5, 0, -2, -7, -8, -5, -2, -9, 7, -3, -18, -12, -11, -6, 2, 4, 3, -7, -6, -12, -2, -13, 2, -5, -3, 4, -6, 9, 7, 9, -10, 5, 6, 10, -9, -13, -1, -9, -10, -1, -9, -11, -26, -3, -1, -9, 6, 2, 2, -5, -4, -11, 3, 5, -8, 4, -5, -2, -1, 5, 2, -3, -7, 0, 2, 1, 4, -5, 6, 5, 8, -3, 1, -8, -8, 9, -12, -13, -6, 11, -3, 1, -7, -6, 7, 3, -5, 2, -4, -2, 5, 8, 0, 4, -6, -6, 5, -13, 7, 0, -7, -4, 5, -7, -5, -7, -5, -5, 1, 4, -10, 3, -2, 4, -12, -1, -9, 7, 9, -7, -3, -7, -2, -3, -9, -3, -3, -8, 0, 10, -8, 4, -3, 8, 2, -6, -8, -13, -8, 3, -10, -7, -12, 1, -4, -1, -9, 3, -13, 7, -4, -1, 3, -1, 3, -1, -2, 8, 8, -6, -11, -6, -1, -1, 2, 2, -5, -6, -18, 6, -17, -4, -5, 4, 3, -11, 8, -10, -9, 8, -5, -9, 1, 6, 0, 10, 4, -13, 4, -13, -10, 2, -1, 6, -8, -5, 6, 8, -3, 4, 
  25, -2, 41, -11, 30, -25, 44, 21, -4, 4, 7, -41, -32, -22, 6, -12, -8, 17, 13, -20, 0, -17, -5, 2, 3, -2, 4, 29, -10, -6, -10, -22, 35, -3, 4, -52, 19, -42, -25, -2, -4, -17, -6, -24, -50, -26, -12, -26, -36, 14, -23, -28, -34, -24, 3, -6, 6, 9, 7, 4, -23, -14, -55, -66, 3, -52, 10, -24, -16, -11, -52, -6, -9, -25, -20, -16, -60, -37, -4, -27, -9, 11, -27, -13, -14, -18, 3, -5, -14, 13, -2, -25, 0, -23, -32, -21, -5, -6, 4, 12, -15, -2, 23, 1, 4, -5, -32, -14, 2, 17, -19, -21, -20, -24, 4, -2, 8, -19, -3, -4, -23, 14, 5, 4, 0, 16, -8, -11, -3, -3, 2, 19, -6, 9, -24, 15, 21, -4, -33, 10, -14, -9, 15, -7, 0, -2, -13, -16, -8, -2, 0, -11, -35, -3, -28, -3, -18, -27, -6, -7, -7, 8, 13, -4, 14, 3, -14, -6, 13, 16, -15, 11, 4, 9, -12, -30, 13, -2, -20, -12, 2, 12, 8, -6, -8, -31, -15, 2, -1, 9, -30, -4, 7, -8, 0, -5, -7, -8, -12, 7, -4, -32, -48, -20, 7, -15, 36, -3, -14, -15, 0, 32, -20, -21, 21, 4, 10, 18, 1, 19, -26, 0, 7, 0, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 64,224 } };
const TfArray<1, float> quant8_scale = { 1, { 0.014307568781077862, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[2*64] = { 
  116, -21, -12, -50, 61, 31, -37, 51, -63, 63, 65, 119, 25, 44, -67, 50, 24, 33, -45, 54, 79, -40, -58, 89, 19, 16, 20, -4, 14, 47, -51, 30, 19, -54, 61, 36, 13, -34, 13, -5, -46, 16, -54, -48, -25, -22, -22, -84, 16, 39, -21, -8, 58, 72, -63, -1, -17, 5, -14, -59, 32, 13, -17, -35, 
  3, -27, -13, -40, 74, 28, 11, 59, 115, -127, 60, -11, 32, -86, -47, 60, -56, 9, -71, 34, -93, -38, -25, -53, -95, 103, -87, 10, 61, 41, -53, 76, 48, -29, -81, 17, 54, -14, 8, 21, -53, 37, 41, 77, -4, 0, -1, -73, -41, 88, -14, -12, -33, 59, -51, -6, -31, -4, -44, -21, -6, 31, -13, -50, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 2,64 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0034360070712864399, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int8_t tensor_data10[16*1*3*129] = { 
  /* [0][0][][] */ -1,-20,-9,28,-13,-23,-38,-5,64,64,46,53,66,56,19,8,37,30,30,54,37,19,40,24,57,-1,15,10,37,34,-41,11,-30,-51,-28,-51,-46,-51,-18,-42,20,51,34,-20,6,-10,15,32,-3,7,49,56,83,105,102,47,81,56,66,67,49,73,59,79,74,33,62,-2,-12,-12,-11,-27,-26,-22,-19,2,-16,-16,-22,-29,-22,-9,-30,-46,-31,-18,-6,19,49,36,38,106,98,58,34,10,24,-8,15,34,-23,-37,-54,-23,-11,-9,36,0,-7,-10,-22,7,-20,27,18,37,39,32,29,34,38,33,43,24,13,14,45,70,81, 35,-20,-27,37,-45,20,-33,7,38,90,84,25,25,88,33,21,49,-31,15,23,60,-7,0,-59,50,4,-9,11,4,33,-6,-35,-86,-34,-51,-54,-76,-70,-22,-46,-5,7,19,-9,-5,-14,9,20,5,23,33,38,127,86,115,113,66,82,71,43,60,69,61,86,61,41,47,6,-10,-19,-27,-25,-20,-31,-21,-18,-20,-6,-21,-30,-15,-37,-31,-24,-20,9,-19,36,28,18,63,60,93,59,28,-33,47,-28,-35,-19,-50,-64,-59,-62,-42,-21,-38,-24,-47,-46,-52,-39,-17,-10,12,23,15,22,53,57,52,14,29,13,-1,4,32,25,20, 10,15,-49,16,-31,-23,-29,-16,19,66,43,69,22,54,-16,3,58,33,90,-8,-37,15,81,-3,46,-11,3,28,70,47,25,-52,-12,-6,-60,-49,-51,-25,-38,6,34,40,-18,-26,0,14,18,15,28,10,56,62,80,107,124,88,111,84,34,49,62,49,36,56,79,48,33,20,-12,-9,-27,-42,-21,-23,-14,-13,-10,-10,-30,-33,-11,-18,-59,-37,-20,-16,-16,15,31,31,13,13,31,46,-22,-21,-16,-45,-29,-29,-43,-63,-42,-65,-53,11,-38,-50,-29,-34,-49,-18,-12,-14,-11,32,26,11,19,31,66,26,-3,17,-15,32,5,47,39, 
  /* [1][0][][] */ -30,24,6,-64,-68,-40,-38,-86,-34,-36,-38,-75,-76,-58,-40,-36,20,-35,-99,-100,-24,-36,14,8,4,-16,-75,-68,-59,-43,-54,27,18,-17,24,-5,-4,17,-11,21,-32,-58,-21,-25,10,-8,16,-38,-32,-27,-22,-49,-36,-25,-53,-59,-32,-44,-27,-21,-23,-22,-13,-38,-23,-25,-16,8,37,20,9,11,22,23,13,-4,5,-3,10,5,6,6,25,27,9,25,21,19,20,-4,10,-22,-10,-9,-9,4,-5,17,23,29,46,50,41,25,3,13,22,1,0,3,-6,-12,-8,-30,-14,-36,-33,-36,-30,-28,-25,-15,-13,-36,-6,-43,-25,-33,-42, -38,-18,-12,-75,-77,-46,-40,-48,-8,-65,-24,-15,-84,-76,-45,-35,-23,-1,-8,-5,-35,26,31,-19,-45,-5,-3,5,-24,-24,-42,-20,-7,-10,-25,-6,14,72,14,-6,-36,-18,-25,5,7,13,9,7,-28,-33,-27,-23,-51,-60,-53,-51,-37,-53,-37,-19,-15,-30,-27,-37,-39,-26,-33,2,16,2,-8,13,20,8,7,-22,-9,7,8,11,16,-8,11,31,-9,26,25,-3,-1,-4,4,-16,-14,-14,-1,26,8,3,8,5,32,40,45,35,7,-6,4,6,5,-11,-7,-26,-19,-38,-14,-25,-32,-34,-42,-40,-37,-36,-31,-34,-31,-43,-15,-48,-24, -42,22,-13,-91,-127,-50,-39,-30,-14,-50,3,-4,-28,-7,3,38,24,35,-3,71,127,52,-9,106,-22,-69,-9,-64,-11,-29,-23,-63,-10,15,-12,-16,-3,38,5,-5,-18,-2,-1,20,8,9,17,-7,-1,19,10,1,-47,-30,-41,-31,-18,-46,-16,-8,-31,-16,-27,-15,-12,-4,-4,21,17,15,7,16,25,41,23,5,12,9,0,17,0,8,16,9,24,16,13,29,13,13,16,-6,-6,-9,0,30,1,21,20,25,34,44,58,22,42,14,12,12,0,-5,23,-17,-21,-32,-20,-24,-9,-12,-10,-22,-12,-14,-19,-9,-28,-17,-14,-21,-41, 
  /* [2][0][][] */ -6,5,-8,-68,-16,-54,-40,-76,-27,-47,-54,-66,-117,-103,-86,-51,20,-63,-77,-47,-60,2,13,13,-5,8,-55,-37,-41,-13,-59,-32,-11,-2,-13,-9,44,60,75,23,17,20,30,3,-1,38,44,3,-35,-10,-1,-41,-74,-45,-57,-36,-10,-31,-20,-21,-22,-4,-25,-17,-20,-12,-46,21,42,19,25,32,26,15,20,-6,-6,7,16,-1,26,13,31,44,11,32,20,-2,-7,15,14,-13,-15,-3,5,14,7,29,35,47,47,69,72,64,46,50,27,24,43,40,13,9,-6,-2,-12,-34,-23,-56,-28,-29,-21,-31,-18,-12,6,-39,-31,-39,-24, -17,27,-8,-67,-14,-60,-47,-60,-29,-88,-43,-64,-87,-51,-35,10,-7,26,25,89,127,36,33,20,27,-66,-42,-22,-42,-46,-46,-35,-10,27,-16,-3,13,59,12,-6,41,39,24,42,57,67,48,24,21,24,11,23,6,-9,-7,-5,-22,-36,-28,-11,-25,-48,-34,-23,-43,-12,-13,-6,37,-3,30,26,34,15,1,-18,2,-7,-2,5,6,-1,27,41,21,36,53,34,37,12,15,-25,-7,-3,16,51,20,27,36,16,46,60,71,53,51,20,39,17,45,38,44,28,-5,-7,-5,1,-35,-36,-26,-33,-23,1,-16,-5,16,6,18,11,-20, -9,8,7,-43,21,-25,1,-19,-72,-107,-28,-54,-20,-10,37,28,-7,26,23,115,99,-36,-105,66,-108,-107,-39,6,-49,-9,29,14,28,-21,-12,-24,26,81,24,11,42,62,43,49,41,32,41,-9,3,24,16,-22,-44,-18,-57,-26,-32,-54,-30,-12,-48,-32,-35,-31,-31,-20,-24,12,22,-6,31,36,12,26,25,-1,4,-13,-2,16,16,14,21,39,42,23,21,34,14,15,12,-3,-15,12,24,57,46,33,50,62,45,79,106,111,70,56,51,45,73,58,76,35,25,9,3,3,-5,-27,-21,-58,-26,-2,9,-8,45,17,31,41,23, 
  /* [3][0][][] */ 8,15,-41,-54,-44,5,14,43,14,-30,25,15,-44,-84,-57,-15,25,19,27,25,69,41,49,63,18,-9,3,-14,0,-30,-12,-38,-30,3,-6,-44,-24,20,-30,1,-18,-9,22,20,13,71,58,88,120,78,64,111,127,85,82,76,78,86,37,21,26,1,14,8,17,24,-29,-5,-19,1,9,10,12,5,-12,-23,-13,-22,-5,23,-6,-4,15,28,26,5,12,29,17,66,38,21,32,31,21,42,23,55,22,25,54,28,57,32,25,49,-26,0,39,11,29,19,-13,-9,-2,-3,1,-26,-9,2,-26,10,2,-31,26,-14,14,8,-2, 7,14,-24,-21,0,34,10,-14,5,21,24,-19,-26,-49,-77,-48,-21,-17,-19,38,59,-5,12,42,-37,-39,-20,-8,-9,-25,-45,-12,42,7,25,-28,-1,-12,-74,-51,-70,-35,-27,-30,-7,-37,-3,-10,33,39,23,37,22,45,25,30,7,-21,12,6,-20,-39,-38,-33,-3,-17,-16,-28,-29,-17,-21,-6,-11,5,1,-32,-20,-32,-34,-20,-5,-6,-6,-4,-16,-3,-14,11,-9,35,-10,-31,-34,-19,12,1,15,6,4,-15,13,5,-13,2,-6,2,-4,2,20,-4,-2,-3,-36,-10,-31,-19,-17,-25,-6,-17,-32,-27,-19,-37,19,-27,1,22,12, -9,4,-27,-49,-3,-49,1,-3,11,-37,-49,-37,-24,-72,-18,-45,-2,-37,-47,11,2,28,-24,7,-14,8,-27,8,-25,-25,-26,-8,31,-7,-32,-42,-9,-24,-45,-50,-54,-63,-21,-27,-42,-25,-49,3,61,-10,-13,11,34,10,14,33,9,-6,13,1,-19,-36,-15,-15,3,-25,-12,-27,-29,-27,-30,-9,-15,-6,-4,-11,-26,-30,-15,-7,-16,-22,-22,-10,3,-18,3,-15,-16,-16,-4,-12,-7,-11,-10,9,1,3,-25,-10,7,22,-29,14,-16,-8,-14,2,-9,-22,3,-11,-29,-22,-31,-65,-54,-49,-62,-12,-61,-25,-18,-42,-37,-29,-37,-28,-63, 
  /* [4][0][][] */ 58,-14,-5,-6,-35,-38,-33,3,53,75,53,81,38,29,15,-20,47,26,77,20,-57,-11,33,2,51,12,-31,-19,49,18,-25,-16,-18,-73,-35,-27,-59,-10,-25,-30,-22,10,-10,-39,-31,-40,13,8,-8,-42,-17,18,48,73,49,-22,43,64,27,30,51,50,60,83,72,64,68,37,3,-4,6,-21,-27,-19,-20,7,-9,-17,-29,1,-5,-24,-41,-25,-20,-36,-29,33,7,24,27,33,64,22,9,-1,-5,-15,-15,-26,-58,-77,-47,-33,-41,-26,-30,-32,-47,-43,-64,25,-14,36,-5,6,15,34,43,56,18,7,28,-16,11,-8,-7,48,12, -25,-51,-78,11,-27,-50,-56,-11,66,60,19,14,31,49,48,31,55,-26,-23,-2,-45,-7,93,26,30,-47,-28,-51,40,65,-30,-21,-68,-62,-58,-83,-42,-58,-18,-24,26,36,39,-19,-11,-31,15,35,-4,-10,-28,25,75,43,80,87,75,67,30,24,52,21,41,76,104,67,59,22,-5,0,-25,-31,-37,-23,-10,-3,-16,-28,-35,-13,-25,-11,-41,-74,-32,-42,-23,8,-3,9,-14,41,59,51,-4,-25,2,-31,-27,-29,-2,-80,-86,-71,-40,-65,-28,-9,-37,-67,-72,-50,-14,-34,3,-19,32,26,26,52,62,23,-4,15,-18,10,-20,20,22, 44,-26,-29,-15,-48,-52,-32,-65,-8,-10,-19,40,31,3,5,23,31,30,68,-2,-36,-5,25,-3,50,-49,-18,33,127,39,5,-38,-35,-31,-66,-49,-52,-39,-11,-42,17,6,-26,-4,-32,-24,-11,-15,9,-13,-9,1,-1,32,81,8,0,92,49,52,42,11,64,78,84,18,44,3,-11,-4,-26,-50,-22,-27,-41,3,-17,-11,-28,-14,-21,-31,-67,-65,-33,-37,-7,-7,18,25,21,28,35,40,10,-7,-13,-66,-12,-33,-95,-67,-100,-80,-61,-39,-28,-35,-31,-79,-56,-55,-20,5,6,-17,25,12,10,39,18,16,3,-24,-16,-10,-15,17,15, 
  /* [5][0][][] */ -7,6,-3,-42,-28,1,19,-15,-8,-31,-14,-14,-36,-28,9,0,10,-28,-23,-30,-24,-7,16,21,-6,3,-25,-14,-15,-3,-40,6,-6,9,14,17,5,-2,1,-7,-40,-90,-65,-31,-16,-57,-27,-41,-33,-26,-45,-37,-76,-78,-96,-81,-78,-53,-90,-90,-70,-86,-103,-119,-116,-114,-121,-112,-101,-90,-81,-63,-55,-38,-19,-55,-51,-26,-16,-50,-46,-27,-22,-23,-35,-29,-39,-35,-22,-37,-31,-52,-34,-45,-27,-47,-44,-48,-42,-38,-53,-38,-43,-39,-40,-30,-42,-48,-40,-58,-57,-69,-80,-69,-94,-91,-105,-105,-66,-90,-102,-78,-77,-70,-76,-78,-80,-64,-96, -16,6,-10,-34,-27,-5,6,-14,-39,-31,-24,-20,-47,-49,-18,-15,7,-10,-23,-22,1,-2,19,16,-2,24,21,15,-17,-12,-5,-24,-18,-25,-21,19,31,17,31,-23,-67,-74,-52,-26,-31,-40,-58,-51,-49,-57,-54,-43,-72,-79,-77,-73,-94,-76,-85,-90,-69,-99,-70,-98,-115,-92,-115,-113,-110,-68,-65,-67,-65,-25,-50,-23,-37,-28,-31,-46,-41,-33,-19,-34,-28,-57,-31,-24,-37,-4,-20,-31,-37,-41,-28,-44,-39,-43,-43,-57,-26,-56,-34,-41,-34,-58,-53,-66,-66,-73,-59,-64,-74,-85,-104,-99,-119,-96,-94,-89,-104,-94,-78,-74,-56,-86,-73,-84,-76, -8,15,-2,-17,-31,23,-2,-19,-14,-16,3,-9,-31,-21,6,6,11,3,-8,15,42,18,-3,53,-1,-4,0,-12,-10,-8,-5,-2,2,23,23,8,13,26,-4,-4,-33,-55,-54,-15,-12,-14,-21,-13,-12,7,-10,-14,-55,-48,-67,-37,-48,-59,-67,-46,-59,-81,-69,-65,-105,-69,-82,-127,-73,-97,-69,-62,-40,-20,-50,-40,-30,-21,-12,-16,-41,-8,-21,-24,-8,-30,-33,-24,-30,-11,-13,-22,-18,-37,-28,-22,-30,-28,-24,-26,-35,-14,3,-32,5,-35,-16,-23,-24,-30,-32,-53,-47,-67,-54,-81,-79,-103,-63,-77,-82,-73,-70,-61,-51,-64,-53,-65,-81, 
  /* [6][0][][] */ -4,-25,8,57,43,25,-22,12,39,22,7,2,-84,-94,-59,-95,-81,-127,-44,-112,-105,-24,-42,-50,-47,-27,-22,-31,41,5,28,6,-45,-59,-25,-11,38,0,4,-3,17,80,91,56,11,4,-13,8,3,-14,-5,-17,3,24,58,35,30,58,37,33,39,36,44,62,76,43,44,20,10,1,-7,0,6,-9,2,22,-4,-1,-1,-10,-6,0,-11,-9,-12,-26,-11,-8,-1,3,-8,13,-9,-10,-20,-21,-9,-24,-15,-8,-16,-49,-47,-46,-37,-25,-11,-16,-20,-17,-5,2,10,21,8,15,9,15,31,31,36,25,43,33,55,49,64,61,59, 25,-17,34,51,50,52,-19,-1,37,13,34,-25,-74,-51,-59,-83,-97,-100,-43,-124,-103,-10,-13,-24,-22,-19,-40,-41,34,17,22,13,-30,-65,1,51,72,28,-10,0,42,71,110,49,19,-10,-1,5,19,-11,-20,-3,9,30,60,39,42,49,30,40,38,43,42,73,75,48,58,22,6,4,12,-10,2,5,-13,13,12,8,-4,-7,-9,2,-8,-6,-10,-16,-23,-5,-6,-4,-6,-12,6,2,-9,-25,-2,-12,-26,-17,-35,-51,-52,-47,-17,-33,-24,-23,-14,-15,-5,-12,-4,14,24,24,21,36,35,45,41,26,30,33,45,42,44,63,51, -12,-16,2,48,41,31,-16,-13,58,15,-7,-41,-71,-51,-62,-61,-101,-97,-73,-102,-72,-35,-37,-50,-58,-54,-64,-44,31,21,13,-6,-21,-27,-3,48,57,9,-3,-4,22,90,70,61,13,-3,-17,-9,-1,-21,-33,-6,7,27,79,33,48,69,36,44,43,28,43,62,75,44,56,25,6,15,17,-4,-1,-16,2,5,3,11,7,-1,0,0,-6,-18,-9,-19,-12,-15,-12,2,-5,4,9,8,-21,-23,-12,-14,-21,-32,-20,-42,-42,-46,-31,-41,-31,-4,-18,-19,-23,0,9,25,22,11,21,14,16,29,18,18,25,20,34,55,49,59,20, 
  /* [7][0][][] */ -42,-97,-123,-55,-83,-24,7,-3,11,11,-12,17,48,36,4,-3,11,20,23,23,6,-8,-2,0,18,0,-8,-4,9,0,-8,3,6,9,9,0,-34,-10,-7,-11,15,8,5,-3,4,23,14,15,15,-7,6,4,26,46,36,3,8,18,11,7,15,25,16,9,3,-8,-5,-12,-10,-15,-5,-16,-12,-17,-5,14,11,1,-1,-4,-14,1,-10,-7,-1,13,15,25,41,29,26,43,46,34,36,19,28,20,14,14,17,-10,-6,9,32,21,29,30,16,30,9,23,42,38,45,55,56,61,56,43,45,30,33,14,-10,7,0,9,20, -21,-79,-127,-50,-60,2,28,12,23,38,-6,2,17,55,17,10,17,10,20,19,-2,-17,-6,-2,28,-3,-14,-24,11,6,-10,-14,0,23,-9,-4,-41,-16,11,-4,36,27,-5,-5,7,9,13,31,8,2,10,21,32,26,20,20,21,29,20,7,13,24,12,8,-7,-2,-6,-13,-16,-15,-9,-7,-4,-21,-13,12,1,2,-5,4,-12,0,-9,-7,12,20,12,34,29,29,29,52,52,38,28,19,21,17,22,16,10,-4,-4,-6,23,18,25,6,11,14,7,21,34,27,49,43,65,67,52,53,48,37,28,15,5,9,3,6,7, -35,-76,-116,-43,-79,0,36,-5,-5,9,-11,8,34,21,1,7,12,25,33,7,-11,7,14,6,15,-8,-8,-8,14,10,-5,-16,11,0,10,-14,-28,-10,-8,13,35,13,-12,-13,5,19,17,28,2,-7,13,13,24,37,22,7,14,20,19,10,20,33,19,14,1,-20,-12,-5,-10,-11,-14,-24,-6,-10,-11,2,5,3,1,-9,-10,-8,-12,-10,6,13,14,22,39,27,33,40,53,41,14,16,13,14,5,11,5,-16,-13,7,7,14,15,12,20,20,12,29,37,31,42,55,56,65,46,43,47,32,17,8,5,3,-1,24,8, 
  /* [8][0][][] */ -24,8,-6,-44,6,-36,-31,-47,-6,1,24,18,16,-6,18,10,-17,38,-43,-51,-90,-54,0,-46,-44,1,-45,-28,-89,-52,-36,-29,-64,-68,-56,7,47,30,41,59,-28,-55,-16,-27,-14,-10,6,-37,-65,-22,-13,-52,-36,-73,-56,-46,-45,-54,-26,-33,-45,-32,-22,-21,-31,-8,-27,2,12,9,-10,-5,4,11,10,-14,-5,-14,-6,-2,15,-16,18,13,18,7,-4,19,-1,-14,11,-11,-21,-11,15,25,14,24,20,29,21,39,46,48,8,16,14,-7,17,5,14,18,-3,-38,-16,-42,-38,-35,-47,-29,-40,-24,-34,-14,-20,-19,-22,-23,-47, -9,3,-6,-34,32,-45,-46,5,27,9,47,-34,13,24,84,81,21,0,-22,-17,-85,-78,-58,-51,-23,12,-40,23,31,-5,-13,72,52,71,71,-36,-10,7,39,75,28,19,-12,10,30,49,63,18,4,28,15,1,-15,-31,-49,-14,-32,-38,-12,-20,-38,-24,-34,-16,-40,-19,-26,-14,18,1,18,7,21,-6,14,-20,-3,-6,6,4,15,-20,4,26,8,12,11,15,17,-4,14,-24,-38,-8,-1,9,29,28,35,25,21,66,51,50,28,27,41,41,47,8,23,9,4,-13,-13,-12,-28,-27,-31,-48,-24,-14,-10,2,3,-8,-9,-16,1, -25,0,3,-50,-12,-51,-7,-1,9,-23,-38,-18,21,-9,8,-18,-64,-14,56,127,72,-33,-14,-37,-34,-99,-30,-59,-32,-50,-35,-35,-17,-22,-28,-5,43,88,68,90,85,71,66,48,46,55,30,7,8,38,9,-23,-30,-26,-47,-40,-53,-60,-39,-40,-39,-10,-26,-40,-15,-12,-8,0,34,11,12,29,13,11,10,-5,-5,6,-22,11,1,-19,14,33,20,18,14,6,10,10,6,-7,-30,-5,0,21,30,34,6,23,31,47,56,39,37,10,23,13,8,33,8,-4,7,-16,-8,-23,-42,-47,-25,-38,-28,-30,-16,-30,-10,4,8,13,-37, 
  /* [9][0][][] */ -14,-23,-24,-56,71,-49,-52,-40,11,-8,78,-7,-29,32,39,25,-33,6,25,-12,-39,-64,-56,-73,-57,-34,-59,-43,-21,7,38,41,-15,-7,7,2,31,47,63,120,77,60,5,6,39,16,26,-20,-63,-38,-25,-65,-65,-127,-123,-69,-53,-73,-35,-35,-45,-33,-16,-44,-30,-10,-11,39,61,33,16,17,34,50,31,6,12,6,24,12,42,12,39,38,33,48,25,3,21,-1,15,-14,-10,6,8,53,45,48,37,65,40,73,65,54,21,22,44,7,31,0,31,3,14,-12,-4,-13,-27,-54,-17,-45,-32,-16,-41,-4,-6,-6,-16,-36,7, -35,-9,7,-67,63,-41,-57,-45,-23,-4,24,-15,-6,36,58,36,-22,-3,-22,-11,-53,-71,-51,-35,-43,-50,-34,15,-20,11,29,7,-3,-7,-3,3,34,29,36,85,8,-24,-18,-16,22,-30,1,-56,-57,-21,-68,-86,-67,-122,-104,-74,-95,-77,-47,-31,-41,-27,-22,-44,-28,-1,-17,-9,26,15,22,34,35,41,30,3,-3,18,23,7,3,-1,23,49,16,32,37,21,1,6,18,-4,-23,-22,-6,13,5,31,15,33,26,70,81,52,17,13,6,5,24,-10,4,-17,5,-39,-27,-45,-42,-24,-20,-57,-47,-48,-45,-31,-6,-26,-19,-27,-40, -23,46,36,-42,76,-26,-32,-36,-5,13,15,-33,-21,-25,21,-14,-28,-10,25,23,-44,-91,-48,-47,-65,-68,-20,-16,-9,73,61,20,-51,-7,22,-51,22,45,42,16,28,-14,-23,21,27,16,6,-46,-57,-40,-49,-109,-74,-107,-123,-68,-68,-63,-35,-29,-39,-32,-40,-38,-23,-20,-12,13,60,37,8,30,22,23,32,14,3,23,1,31,40,1,46,53,27,22,30,7,14,6,16,-21,-13,-13,23,43,10,20,19,18,14,46,71,44,23,17,2,11,-1,-3,15,-12,-8,-29,-19,-50,-45,-50,-26,-54,-50,-47,-29,-18,-19,-16,-31,-38,-38, 
  /* [10][0][][] */ -2,30,-20,-67,-69,-16,-22,-52,-47,-43,-30,-41,-45,-46,-5,-17,4,1,-29,-2,10,-2,11,-31,-25,-25,-33,-33,-64,-48,-63,-31,-16,4,28,22,-2,11,27,-3,-42,-86,-73,-40,-36,-23,-9,-19,-17,-43,-42,-51,-68,-74,-113,-91,-74,-64,-60,-65,-57,-57,-35,-89,-89,-101,-99,-41,-8,-12,5,7,15,19,28,-3,5,0,17,8,10,-5,17,22,27,26,16,15,12,8,8,7,-11,10,30,27,33,29,40,37,44,55,48,52,43,33,31,22,23,34,30,23,12,5,6,-7,-5,-15,-29,-35,-23,-32,-23,-47,-43,-69,-74,-73,-94, 7,-3,-26,-66,-70,-43,-4,-33,-43,-46,-31,-29,-38,-22,-3,-32,-8,3,-10,7,-7,-5,1,-25,-32,-19,-20,-11,-46,-73,-74,-28,12,6,-14,1,24,43,28,0,-13,-47,-44,-21,-26,-27,-11,-27,-29,-43,-32,-46,-71,-86,-107,-80,-82,-62,-87,-62,-90,-82,-81,-93,-111,-79,-127,-51,-23,-23,1,17,20,24,3,1,7,-3,-7,14,10,0,19,16,16,30,4,8,3,-2,-5,-5,-16,6,15,25,31,18,28,28,48,49,64,47,47,26,40,15,12,9,20,9,0,-9,-14,-19,-23,-11,-45,-31,-47,-36,-17,-24,-33,-54,-50,-73,-92, -10,34,14,-29,-44,9,37,10,0,15,44,9,0,31,26,25,14,17,13,73,65,44,-3,32,-19,-35,-16,-28,-44,-45,-26,-22,-7,13,8,2,4,51,24,16,35,18,18,41,42,49,41,40,23,37,22,-2,-51,-47,-53,-38,-40,-52,-73,-22,-50,-55,-36,-62,-69,-73,-50,-15,20,1,3,6,6,29,23,8,12,-1,12,20,16,2,24,27,34,23,24,29,10,20,25,1,-7,41,19,46,41,49,41,43,50,70,80,72,85,52,62,45,54,52,56,34,32,10,28,0,5,-16,-4,-14,-28,-29,-15,-5,-22,-34,-24,-40,-65, 
  /* [11][0][][] */ -5,-16,-32,-29,-5,-23,-8,-44,-74,-84,-51,-71,-72,-127,51,10,-42,-50,-60,-70,-41,-57,9,-25,-7,-16,-49,-39,-21,-45,-74,-29,-70,-49,33,-54,-7,-68,-51,-77,-81,-75,-55,-36,-28,-29,18,-39,-40,-9,-36,-31,-29,-66,-59,-60,-8,9,-7,0,-10,-6,10,3,3,5,4,-20,-11,4,-3,2,-2,-3,-20,-13,-6,-12,-3,-15,-4,-1,-11,4,-16,-4,-22,0,-3,-18,-6,4,1,-24,3,-12,-6,-14,-12,5,-25,-4,-28,-13,-29,-16,-15,-7,-32,-2,-36,-1,-40,-30,-30,-45,-37,-8,-13,-29,-35,-44,-33,-12,-31,-46,-38,-50,-36, -26,-12,22,-2,61,-12,70,5,-39,-5,-18,-34,-7,-76,-4,-13,32,75,52,-16,-57,-20,-1,32,-19,-2,9,21,-71,-27,-35,-17,-17,-67,-60,-19,-20,-33,-30,1,-79,-47,-71,-67,-70,-95,-18,-78,-16,-21,-31,-25,-43,-31,-1,-33,-9,2,-14,-15,-17,-31,0,9,-19,-18,5,-10,5,11,-15,-17,2,-12,10,-1,6,-26,-7,-13,-15,4,-13,-15,-15,-2,-5,-13,1,-8,1,-19,-7,9,-14,-1,-17,-11,-20,-12,3,-1,-20,0,-22,-17,-17,-34,-16,-25,-22,-2,-14,-38,-26,-32,-20,-31,-22,-39,-21,-49,-8,-12,-4,-25,-24,-17,-21, -6,-5,-17,54,62,-4,8,39,28,37,93,-19,-11,16,-52,-19,20,-50,29,-43,-56,-31,-44,-17,14,110,73,69,22,-2,-27,-33,0,72,89,-11,-5,-43,-1,-60,-56,-69,-14,-10,-25,-20,-2,-59,-30,-42,-49,-50,-87,-36,-82,-40,-25,-24,-35,-15,-29,-15,-16,3,-7,-14,7,-20,9,4,1,-11,1,-7,-15,-9,-28,8,-9,12,-4,10,8,29,10,14,-5,17,-10,1,23,15,-23,-11,-3,-10,-8,-16,0,-5,-33,-25,3,-8,-15,-2,-25,3,-24,4,-12,-44,-6,-45,-33,-6,-38,-18,-8,-49,-20,-40,-29,2,-64,-16,-35,-58,17, 
  /* [12][0][][] */ -11,5,-24,-55,-7,8,-18,-41,-28,-41,-7,-39,-60,-49,-20,12,47,-26,5,4,13,6,9,0,-39,-33,-29,-12,-10,5,-47,31,32,24,9,8,5,5,23,-10,-37,-79,-69,-35,-32,-70,-56,-57,-33,-30,-59,-53,-90,-66,-105,-71,-47,-37,-56,-49,-30,-33,-30,-29,-49,-53,-60,-47,-39,-29,-29,-13,-5,13,1,-26,-8,-20,-15,-1,-30,1,-3,-4,-8,-4,-28,-29,-45,-31,-20,-16,-32,-11,-25,-11,-11,-11,2,-5,-27,-8,-12,-7,-42,-29,-30,-17,-39,-42,-29,-43,-59,-64,-39,-84,-61,-88,-76,-97,-84,-74,-51,-39,-23,-45,-56,-66,-71, -17,-16,-9,-23,-41,-17,-2,-35,-25,-37,-28,-24,-71,-82,-30,-49,-6,-21,-16,-7,-20,24,9,-7,-7,35,15,25,10,6,17,-16,-5,-38,-18,10,44,31,2,-22,-85,-73,-52,-3,-15,-59,-70,-68,-28,-38,-65,-29,-65,-100,-127,-74,-83,-86,-92,-103,-86,-83,-47,-41,-58,-69,-65,-52,-53,-12,-26,-16,-21,8,1,-29,-28,-9,-6,-25,-6,-6,-3,1,-22,-16,-12,-13,-25,-15,-23,-51,-25,-7,-5,-33,-20,-14,-20,-37,-16,-26,-26,-24,-24,-35,-24,-32,-42,-24,-39,-30,-64,-83,-75,-72,-94,-92,-102,-89,-69,-74,-55,-45,-45,-57,-63,-74,-46, -14,34,20,8,13,19,3,-10,-8,-4,-3,-17,-65,-42,-5,25,20,-3,2,50,58,2,10,15,-29,-50,9,-36,-5,-20,-10,9,-8,21,12,19,29,18,1,-6,-25,-83,-88,-36,-42,-54,-67,-61,-41,-47,-45,-47,-90,-89,-68,-78,-57,-74,-57,-28,-52,-92,-50,-59,-69,-57,-74,-35,-52,-32,-46,-8,-10,25,-13,-25,-48,-33,-20,-17,-2,1,3,-22,-16,-41,-17,-12,-20,-11,-25,-23,-26,-25,-2,-2,-35,-12,-9,-14,-34,-1,14,-22,-14,-48,-11,-12,-26,-34,-14,-49,-43,-44,-55,-78,-87,-100,-61,-67,-79,-67,-58,-47,-62,-41,-57,-64,-59, 
  /* [13][0][][] */ -2,11,-16,-32,-19,-3,3,-4,-9,-12,3,-7,-21,-14,-1,9,19,-4,6,-11,10,9,9,14,-6,-8,-13,1,-7,-9,-21,11,15,17,16,7,8,9,17,15,-8,-44,-36,-11,-15,-27,-21,-25,-17,-12,-33,-39,-56,-57,-63,-49,-59,-62,-60,-59,-62,-64,-84,-73,-86,-96,-88,-95,-98,-97,-70,-64,-42,-12,-11,-42,-40,-23,-23,-32,-54,-12,-11,-26,-26,-35,-22,-28,-22,-9,-10,-19,-27,-22,-17,-15,-21,-24,-30,-28,-23,-14,-18,-26,-30,-22,-27,-21,-30,-37,-41,-47,-40,-54,-54,-70,-73,-87,-73,-73,-67,-62,-67,-59,-43,-55,-59,-55,-57, 0,1,-6,-14,-16,-3,-6,0,-8,-10,-7,-6,-29,-33,-21,-17,-32,-17,-5,-9,-10,5,6,6,-17,-4,-1,7,-7,12,14,-5,-5,-10,-5,-1,12,1,-3,-13,-35,-55,-41,-27,-13,-40,-39,-46,-25,-24,-32,-25,-53,-60,-71,-62,-65,-72,-70,-84,-74,-101,-84,-102,-113,-127,-121,-97,-112,-84,-81,-58,-45,-24,-22,-51,-61,-40,-31,-38,-45,-28,-36,-33,-45,-44,-41,-46,-18,-15,-19,-24,-31,-21,-30,-37,-21,-40,-36,-37,-42,-28,-37,-30,-31,-44,-36,-34,-47,-40,-44,-47,-55,-57,-82,-75,-83,-70,-75,-79,-69,-83,-65,-57,-67,-51,-64,-72,-60, -6,16,18,2,2,22,35,23,1,0,-19,-20,-16,-7,12,2,4,4,-15,14,-1,5,-3,17,-14,-17,3,-7,0,-6,8,6,-8,2,-2,-3,8,21,6,-1,-23,-37,-41,-26,-14,-26,-25,-14,-24,-19,-28,-43,-42,-57,-57,-50,-53,-66,-69,-56,-67,-94,-71,-71,-107,-104,-98,-91,-98,-100,-75,-38,-38,-7,-23,-22,-50,-46,-32,-49,-41,-31,-27,-16,-14,-27,-23,-25,-32,-15,-19,-13,-15,-15,-20,-25,-28,-39,-23,-31,-10,-4,-12,-12,-19,-25,-13,-2,-23,-26,-31,-45,-39,-60,-55,-55,-67,-66,-58,-69,-59,-53,-43,-33,-48,-37,-46,-70,-46, 
  /* [14][0][][] */ -59,-62,-48,43,94,-48,-106,-49,-52,-51,-11,-11,-107,-52,-94,-88,-51,-28,-121,-65,-70,-41,-33,-90,-75,-71,-72,-22,-40,12,1,-5,-42,-40,-38,-26,-5,35,19,1,26,55,47,67,22,-9,-30,-43,-73,-48,-58,-49,-79,-41,-14,-15,13,26,-29,-31,16,-25,36,46,0,23,34,-3,14,-33,-9,14,-29,-5,4,-16,4,-22,8,-49,-77,-50,-18,-25,4,-59,-69,-85,-47,-99,-49,-91,-76,-38,-106,-35,-70,-15,-48,-84,-64,-72,-127,-82,-93,-87,-53,-83,-32,-47,-82,-17,-50,-19,21,-6,-24,-46,-2,17,-35,-6,40,-10,21,-20,-20,38,-24, 37,-53,7,2,45,-89,-22,13,90,1,20,-36,-59,-79,-47,-32,-57,-48,-51,-88,-26,-44,-47,-62,-43,-74,-47,-34,-16,-50,-35,-20,-47,-9,4,11,45,5,30,-3,48,36,86,44,-9,4,-38,-69,-70,-65,-46,-53,-75,-45,-22,-9,2,26,-6,-57,-26,16,12,62,58,25,-7,-5,-18,-10,-2,35,-9,-13,-37,14,15,1,-63,-51,-35,-4,-45,-69,-72,-34,-33,-45,-30,-67,-120,-104,-36,-61,-36,-49,-1,-65,-39,-56,-88,-107,-105,-56,-34,-36,-82,-79,-92,-88,-78,-64,-23,-16,-49,-38,-27,-1,-9,-15,3,-3,7,11,9,-1,26,-9,-25, -38,-28,-26,112,119,-52,28,-39,1,-23,-99,-89,-28,-32,-59,-53,-84,-86,-65,-63,-57,-58,-77,-69,-114,-26,-42,-65,-64,-32,-25,-6,10,-26,-58,-35,31,9,-9,-19,8,24,67,4,-48,-49,-74,-40,-46,-34,-68,-51,-37,-53,-15,-14,15,-23,10,-16,-41,13,37,47,32,22,16,-1,20,-31,-2,-10,-64,-21,-5,16,-4,-11,-3,-44,-66,-28,-44,-8,-57,-70,-63,-55,-75,-29,-89,-14,-74,-32,-68,-31,-42,-39,-47,-37,-81,-100,-102,-116,-45,-16,-75,-90,-96,-65,-35,-56,-5,-15,-36,7,-35,-23,-47,-35,-29,-12,-48,-9,-9,21,-9,6,-9, 
  /* [15][0][][] */ -10,33,36,-10,14,-24,-9,-33,5,22,60,-5,-8,44,90,101,35,43,2,2,4,-40,-58,-62,-65,-43,-79,-77,-41,-33,-9,-8,-47,9,15,7,33,16,46,76,62,2,30,5,21,44,39,1,-35,-16,-25,-51,-48,-37,-48,-46,-33,-32,-26,-5,-29,-6,-4,-22,2,4,10,13,4,9,17,21,18,18,9,6,14,9,21,12,15,13,21,0,16,13,23,-19,-25,-33,-12,-6,-19,-11,15,17,13,42,31,41,21,38,49,45,30,22,30,44,22,48,35,24,4,19,25,18,-1,-13,-7,8,-10,15,13,60,45,30,15,-11,18, 0,-30,-25,-62,19,-27,-34,-26,17,-19,17,-76,-16,-23,40,21,-60,-24,-42,-50,-53,-77,-56,-69,-35,-19,-57,-1,-27,10,27,-20,-9,-5,-19,-17,-15,37,40,49,12,31,36,11,21,5,1,-49,-45,-24,-54,-40,-36,-70,-60,-22,-25,-12,-33,-6,-9,-9,-9,-11,-9,-12,17,18,13,10,36,29,16,10,27,-2,24,9,18,28,10,5,24,29,27,2,26,-1,-4,-10,-29,-25,-22,-16,-9,-4,12,-4,14,23,-5,56,36,58,27,23,26,32,49,27,31,55,34,24,-10,3,-10,3,11,-17,2,0,14,34,42,39,40,12,24, -14,-24,-39,-48,8,-21,-54,14,46,30,41,-46,34,14,50,26,10,50,4,-6,-29,-112,-81,-21,-55,-42,-45,1,-73,-12,47,35,-11,31,27,-24,6,95,55,81,91,120,97,92,109,127,124,86,73,82,59,67,18,38,28,39,35,16,17,-1,-11,13,-22,4,19,20,17,14,19,17,27,39,36,41,31,8,20,12,13,11,26,13,34,39,33,26,14,0,-7,-4,-1,1,-8,25,30,42,39,55,57,29,45,73,81,85,56,40,68,44,66,77,86,43,90,23,42,42,11,15,0,11,32,21,38,60,37,66,24,38,52, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 16,1,3,129 } };
const TfArray<16, float> quant10_scale = { 16, { 0.0068843085318803787, 0.0090829050168395042, 0.0079551693052053452, 0.012122089974582195, 0.0068422914482653141, 0.016398349776864052, 0.011389547027647495, 0.018472397699952126, 0.007337985560297966, 0.0072787762619554996, 0.014392363838851452, 0.0079817976802587509, 0.010749528184533119, 0.028237299993634224, 0.0033068570774048567, 0.010566260665655136, } };
const TfArray<16, int> quant10_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int8_t tensor_data11[16*1*3*16] = { 
  /* [0][0][][] */ -44,-20,-46,53,-73,-54,-37,-48,-27,-11,-42,-31,-36,-18,-9,-48, 28,23,29,-31,-39,61,-44,-73,68,-20,28,115,-13,-34,-2,65, 57,18,86,127,-63,-14,-109,-60,-57,-2,-72,-7,9,-1,-6,-24, 
  /* [1][0][][] */ -16,-20,-94,0,55,-18,18,-35,-66,-15,-4,14,-16,59,5,-33, -54,14,-4,49,-14,43,-91,-74,125,-44,83,60,51,70,24,50, -56,54,100,2,-36,6,-127,-53,-27,1,92,-116,9,15,21,67, 
  /* [2][0][][] */ -45,36,-7,-52,6,46,-111,-80,40,-10,46,120,-5,89,-8,43, -43,-54,-28,-3,1,27,-71,-73,43,6,86,81,38,127,-1,13, 3,-6,13,23,-41,-4,-49,-90,42,45,93,-51,-3,99,-14,119, 
  /* [3][0][][] */ -31,49,-9,-30,-27,35,-127,-27,13,-9,18,30,12,69,13,3, 18,-27,3,7,-32,5,14,-89,-36,-1,-27,-7,-9,-4,-25,80, 44,76,25,33,-39,-1,-14,-35,-13,38,7,79,-38,-29,-15,-7, 
  /* [4][0][][] */ -50,31,31,-37,0,-21,-45,-10,-42,-78,41,-87,-37,-104,2,65, 4,-39,-30,-28,9,27,-64,9,-57,-6,-49,55,-62,-88,-43,-90, -80,-35,-40,-45,-3,-14,-45,-66,-28,-57,-18,58,-127,-49,-23,-63, 
  /* [5][0][][] */ -49,-32,-2,5,-37,16,11,-27,-7,0,-87,28,-58,-4,-18,-27, -103,4,53,5,-43,-41,-73,-48,-59,76,-10,-44,-100,1,-12,39, -78,8,64,-58,-34,-39,-76,-127,8,121,-3,10,-63,-17,30,54, 
  /* [6][0][][] */ 120,-27,-11,127,90,-28,-84,116,41,65,-15,-27,-125,-18,-22,20, -95,5,-31,21,-93,-66,-49,-7,32,4,-14,-37,-42,-27,-13,-21, -79,30,-37,-22,-126,23,-33,-108,-23,33,-16,-47,-1,-17,-21,-24, 
  /* [7][0][][] */ -39,68,9,97,-69,27,-46,-43,39,-127,16,36,-12,66,10,-3, -89,-12,-73,58,7,-28,-125,-15,19,-48,31,-49,11,40,-32,-50, -19,-47,67,-2,-43,-25,57,-81,-7,-52,-16,124,-17,57,30,-42, 
  /* [8][0][][] */ -28,-9,19,-104,-20,-61,28,48,-31,-78,-61,25,11,-117,15,-35, 4,-63,18,-127,20,-32,57,29,-17,-98,-84,-8,44,-114,-1,-40, 42,4,-38,-58,73,-34,28,47,-7,5,-30,23,-14,-61,15,-41, 
  /* [9][0][][] */ -30,18,47,27,23,69,-87,-41,31,55,103,15,34,112,65,49, -45,-32,30,71,8,20,-39,-28,-22,44,62,63,49,105,9,37, -3,53,56,38,-64,89,-9,-42,47,40,74,6,64,117,-29,127, 
  /* [10][0][][] */ -55,59,11,70,-67,16,-127,-37,50,18,54,0,61,87,41,-12, -19,-15,5,-27,-4,23,-13,-122,17,35,45,65,-10,57,-25,65, 23,7,-9,22,-89,9,-86,-73,-9,85,64,31,34,28,8,102, 
  /* [11][0][][] */ -6,-81,58,76,-25,-84,79,-41,-73,-26,-41,-60,-108,-32,-27,49, -22,51,-32,64,6,-71,53,-2,-34,-43,-81,11,-29,-74,-65,7, -73,-74,83,45,-100,-13,83,-115,-4,-54,-65,-127,-7,-25,10,7, 
  /* [12][0][][] */ -27,-9,-95,-18,-41,67,48,-97,-66,29,32,-9,71,-111,22,36, -74,-8,-44,-87,-48,70,32,-32,-60,81,-2,-43,50,127,-1,31, -38,-8,5,-76,-58,12,5,-29,8,6,-45,-12,-15,-60,-67,39, 
  /* [13][0][][] */ -21,-3,-33,77,-15,0,-86,-42,-59,-12,14,45,27,67,-16,-9, -50,-12,-40,-43,19,48,-63,-127,69,-1,62,96,41,108,15,49, -26,42,81,22,-74,74,-114,-35,65,-1,55,-111,13,84,44,111, 
  /* [14][0][][] */ -21,58,70,121,-56,101,-126,-120,64,4,11,118,33,52,26,23, -70,58,54,33,-18,51,-117,-81,22,14,123,-107,31,92,45,78, -49,27,56,42,-64,-3,16,-32,14,105,-43,126,-64,6,97,127, 
  /* [15][0][][] */ 15,39,14,74,-27,-1,-117,-74,28,5,23,-44,43,42,42,25, 3,-73,-24,43,-5,3,-127,-70,-2,-4,-31,-45,-46,12,6,-25, -72,81,11,-53,-95,20,-101,-46,8,-38,43,-71,8,79,35,46, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 16,1,3,16 } };
const TfArray<16, float> quant11_scale = { 16, { 0.0066706845536828041, 0.0077957529574632645, 0.0065514110028743744, 0.0099409027025103569, 0.0063738995231688023, 0.0043772472999989986, 0.0046820049174129963, 0.0074036596342921257, 0.0070353955961763859, 0.0061084069311618805, 0.007050687912851572, 0.0048274998553097248, 0.0048790518194437027, 0.0071035115979611874, 0.004602392204105854, 0.0062881051562726498, } };
const TfArray<16, int> quant11_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension12 = { 1, { 16 } };
const TfArray<16, float> quant12_scale = { 16, { 2.6997289751307108e-05, 3.5619235859485343e-05, 3.1196745112538338e-05, 4.753761095344089e-05, 2.6832516596186906e-05, 6.4307256252504885e-05, 4.466489190235734e-05, 7.2440780058968812e-05, 2.8776416002074257e-05, 2.8544222004711628e-05, 5.644064731313847e-05, 3.1301169656217098e-05, 4.2155013943556696e-05, 0.00011073451605625451, 1.296806749451207e-05, 4.1436320316279307e-05, } };
const TfArray<16, int> quant12_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int8_t tensor_data13[16*1*3*16] = { 
  /* [0][0][][] */ -65,-34,-10,-84,50,-89,2,30,-2,-74,-70,-16,36,1,55,17, -2,41,-107,-4,-27,-98,29,-117,-109,27,79,-74,41,5,-45,-116, 68,-97,40,-103,-54,-69,-98,-90,-54,-21,-127,-36,15,-45,68,24, 
  /* [1][0][][] */ 28,22,49,-127,-61,-45,112,6,-88,26,-27,-105,-60,72,-28,26, 61,68,91,82,86,-55,43,-33,-36,62,80,-93,-48,57,-27,30, 99,-55,-7,-89,20,-39,-79,18,-95,-47,59,-13,-1,-15,30,-7, 
  /* [2][0][][] */ 25,-5,0,-10,6,-127,36,-16,-12,-12,-12,11,22,-4,-5,3, 0,5,-7,25,-1,-90,38,11,-17,-3,1,8,-10,13,-7,25, 36,29,13,32,13,-43,6,11,-2,7,18,11,-5,22,9,13, 
  /* [3][0][][] */ -61,-17,-97,-11,15,15,9,-44,40,-56,-10,-13,32,-79,-64,-1, -10,-41,-49,-9,32,-21,4,1,15,-60,-14,31,12,-42,-38,17, 15,-44,-53,-85,-18,-51,-62,-65,40,-64,-37,26,65,-127,-66,-16, 
  /* [4][0][][] */ 40,-53,-18,-70,-98,-39,40,-69,21,-124,-10,6,52,-100,-61,-38, -76,13,12,-28,27,20,-85,-127,-1,-95,17,34,14,-75,-14,-64, 25,-57,-80,-42,-21,40,-72,-61,35,-68,-38,75,22,-37,14,-114, 
  /* [5][0][][] */ 5,45,76,46,-31,-33,-33,20,-59,13,64,-11,-28,58,28,57, 90,49,59,73,33,6,10,28,-36,55,48,-69,-23,85,44,-7, -30,-127,-20,-23,-4,46,0,-12,46,-50,-35,44,-14,-15,-54,-38, 
  /* [6][0][][] */ 17,38,39,-30,-7,58,127,45,-112,68,42,-27,-40,125,63,65, 28,-10,78,61,46,-42,-33,42,-93,33,55,-75,-18,31,36,-45, 21,-124,24,-8,24,-11,-43,-2,31,-7,30,112,-58,12,-15,-43, 
  /* [7][0][][] */ 55,9,36,-40,-46,29,-2,-34,-55,6,-18,-55,-68,33,-42,24, 38,29,86,26,23,-11,46,56,-42,31,37,-43,-11,42,41,-6, -63,-79,-82,19,-3,16,-54,-127,17,-123,-74,40,-42,-41,-95,-33, 
  /* [8][0][][] */ 7,-2,-13,32,23,-19,62,-14,18,21,-33,-4,10,-94,-14,-12, -21,22,-36,18,0,8,-36,-94,1,-11,-35,55,56,-41,-11,-18, -19,-5,-25,-83,-2,-22,-12,-7,12,-45,-90,46,0,-127,-5,0, 
  /* [9][0][][] */ 17,52,43,49,-61,-102,-127,93,-95,27,122,-101,-61,73,51,69, 33,-98,-24,11,61,-35,-71,-41,54,-57,-74,11,62,-16,-70,-15, 53,-41,-8,21,25,66,33,-35,36,-85,18,-1,-1,95,-76,-74, 
  /* [10][0][][] */ -65,43,68,1,-64,-21,127,-23,-95,38,7,-32,-84,49,-32,15, -22,1,6,11,33,-6,-39,-14,-37,-8,-3,2,-6,-29,8,-8, 27,-99,20,-35,-17,-66,-37,9,-100,29,7,-80,-41,1,-39,-52, 
  /* [11][0][][] */ -18,-57,-68,-86,-25,-25,-78,-75,-30,-33,-81,26,13,-94,-67,-90, -53,17,-94,-75,-5,54,-56,1,-100,-49,-103,-53,57,-83,-78,-70, 68,-3,-85,-127,-60,14,-35,-63,7,-5,-23,-94,18,-13,-31,-108, 
  /* [12][0][][] */ -15,-32,-69,-17,58,21,-47,-28,7,-39,-7,19,55,-81,-45,66, -2,8,-67,3,-6,19,-25,-44,31,-127,-60,31,30,-14,-56,15, -6,-41,-3,-44,30,-51,91,-70,-26,-113,-77,29,-9,-74,-52,15, 
  /* [13][0][][] */ 34,-30,-38,31,-39,56,22,2,-19,-75,79,-17,29,82,18,-18, -70,-69,31,-32,27,38,-32,-75,-105,47,21,-125,8,32,-73,-13, 27,2,15,-11,7,36,45,-127,-96,-79,-62,-89,20,-15,-37,37, 
  /* [14][0][][] */ -16,17,-31,61,53,10,-7,3,44,-62,-38,25,-10,-111,-91,25, 19,-43,-20,45,50,-33,38,-18,3,-74,32,27,23,-37,-76,5, 32,-23,-20,-4,-19,-29,-31,-32,27,-127,-27,8,-1,-97,-79,10, 
  /* [15][0][][] */ 40,-79,-26,-28,-21,10,99,-46,-52,-2,-9,-64,16,-12,28,-72, -3,87,-14,-120,-24,-34,-28,-44,-75,50,-17,-108,-48,63,27,17, 24,51,53,10,127,-11,2,30,-31,53,76,-75,-33,44,63,27, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 16,1,3,16 } };
const TfArray<16, float> quant13_scale = { 16, { 0.0022989811841398478, 0.0049401926808059216, 0.023243671283125877, 0.0067257527261972427, 0.0047698128037154675, 0.0064908824861049652, 0.0051790205761790276, 0.0079444702714681625, 0.0073600495234131813, 0.0075415503233671188, 0.0057106702588498592, 0.0034710217732936144, 0.0070153898559510708, 0.003373853862285614, 0.0074934824369847775, 0.0060534235090017319, } };
const TfArray<16, int> quant13_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[32] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension14 = { 1, { 32 } };
const TfArray<32, float> quant14_scale = { 32, { 0.00041985040297731757, 0.00026310817338526249, 0.00055090838577598333, 0.00029818090843036771, 0.00031474043498747051, 0.00023985891311895102, 0.00027280955691821873, 0.00021999173623044044, 0.00034158278140239418, 0.00043607081170193851, 0.00038352483534254134, 0.00031244085403159261, 0.0003104362403973937, 0.00027307256823405623, 0.00024423247668892145, 0.00041967551806010306, 0.00017393121379427612, 0.00019545260875020176, 0.00030141897150315344, 0.00030268053524196148, 0.00036516631371341646, 0.00046573972213082016, 0.00018886217731051147, 0.00012966099893674254, 0.00021673434821423143, 0.00025720038684085011, 0.00037439135485328734, 0.0003348751924932003, 0.000253003352554515, 0.0001556019124109298, 0.00036536989500746131, 0.00030977101414464414, } };
const TfArray<32, int> quant14_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int8_t tensor_data15[32*1*3*16] = { 
  /* [0][0][][] */ 10,-28,-19,44,38,-100,-83,-65,43,-40,-73,-25,16,19,-16,-82, -1,-39,-30,20,64,-58,-102,-80,-35,-22,-37,20,9,26,2,-38, 3,-51,8,35,-3,-72,-127,-89,-13,-9,-52,-35,-9,14,17,-82, 
  /* [1][0][][] */ -10,33,79,-115,-36,16,-62,-74,-16,10,6,64,-86,28,-127,26, 11,26,-56,-52,-90,23,-3,22,89,50,23,-24,-105,18,-61,16, 19,-57,25,-66,-17,-69,30,-101,60,-72,-45,-4,21,-23,18,-8, 
  /* [2][0][][] */ -14,-39,-18,20,17,-96,-51,-33,-4,2,-42,-9,13,12,17,-58, 15,-56,-16,-3,24,-94,-104,-32,23,-36,1,9,21,-4,-1,-127, 4,-67,48,17,24,-97,-91,-25,-3,15,-32,-19,7,-34,39,-93, 
  /* [3][0][][] */ 9,-56,-74,-41,12,33,-2,-44,-55,-93,-49,-42,-38,7,-16,-30, 31,-6,17,-45,38,32,38,103,-106,-41,25,-5,-93,-16,-127,71, -3,-36,58,80,9,-5,-3,-37,-14,103,24,-55,54,31,50,21, 
  /* [4][0][][] */ 26,-84,127,36,34,1,-72,41,61,-60,-43,25,-2,-2,52,-21, -2,1,73,-64,-39,-11,-21,23,8,-12,-51,69,-48,-25,-88,-66, -24,-65,53,-1,-97,-47,-32,1,-124,46,-85,11,-87,-14,-50,-24, 
  /* [5][0][][] */ -32,15,46,3,-61,62,81,7,-20,45,-41,-10,67,-34,27,-19, 49,59,107,-39,-3,69,-17,101,-71,-22,19,-9,-127,58,-78,24, 17,78,122,-60,-6,86,45,38,43,104,78,-34,-69,-40,-59,28, 
  /* [6][0][][] */ -8,-85,-47,-50,50,-36,32,49,-118,-61,-19,3,-39,-9,-100,9, 36,-62,-53,48,35,9,-9,-24,11,127,-69,64,33,-24,-15,-69, 12,7,51,-30,17,-15,2,64,-16,-87,19,-29,67,-8,-2,-28, 
  /* [7][0][][] */ 42,-42,101,-98,-35,0,6,17,-17,-38,-71,60,-54,-40,-53,45, 6,-23,127,-53,39,-13,7,-49,-10,10,31,-35,-30,23,-10,-43, 5,-54,71,-58,66,-40,-31,69,-76,34,-46,10,-30,-49,-71,-80, 
  /* [8][0][][] */ -17,28,-30,-56,55,-75,-29,28,-16,-15,17,35,-68,19,-6,2, 27,-23,34,-48,26,8,-13,69,-42,-30,2,-12,-17,3,4,-48, -7,-42,-1,-89,61,-67,-68,-15,-61,-127,-7,14,-7,64,-51,0, 
  /* [9][0][][] */ 6,24,-7,-18,-40,45,40,21,24,101,61,-13,31,-6,-31,26, -2,2,-31,-22,-9,48,-17,44,1,-42,-1,-1,-23,-2,-35,-19, -6,3,40,-95,-50,-22,-2,-1,8,-3,37,1,-127,-23,-96,40, 
  /* [10][0][][] */ -30,32,126,-91,-89,30,13,25,-107,12,1,15,-52,-8,-56,-12, -5,-36,109,-63,-63,-21,41,-16,-6,27,-30,42,-13,68,-61,10, -11,95,76,-68,-47,8,22,18,-17,127,-36,37,-7,119,-36,-37, 
  /* [11][0][][] */ 17,-8,127,-9,29,-33,-26,-8,17,18,24,-71,40,20,5,82, 0,75,-70,-42,-58,52,13,50,-117,53,12,-21,-47,-22,-75,29, 24,19,-38,-8,-9,12,55,37,-33,21,-23,-31,-7,24,-1,-11, 
  /* [12][0][][] */ -11,50,39,-87,4,67,45,113,-49,20,-11,-7,-94,23,-92,52, -15,54,28,-17,-69,14,-2,-4,-10,3,-6,-24,-62,0,-29,50, -24,-1,-1,21,50,-15,58,39,51,127,27,18,60,-1,38,32, 
  /* [13][0][][] */ -24,30,-50,-67,-48,84,45,-84,-127,81,-12,21,-39,42,-50,4, 38,21,-31,-42,-70,-29,-7,81,-30,-23,-31,22,-92,-4,-22,1, 45,-6,53,31,-3,-37,-24,-36,-44,100,-46,3,57,-11,45,9, 
  /* [14][0][][] */ -33,-16,22,-37,-65,12,-42,79,97,32,46,32,-84,17,-127,-24, -7,-22,122,-74,-35,-61,-51,-83,-71,-72,27,63,-25,-31,-62,-16, 10,-1,23,-60,-39,-97,-45,-13,20,-55,43,21,-96,-37,-122,-46, 
  /* [15][0][][] */ -18,12,20,12,-3,-2,-66,16,-43,93,4,24,6,-12,43,-25, 21,-30,8,-52,-90,-62,-33,-9,9,30,33,2,-9,-1,6,-27, 24,18,-37,-76,-19,-18,-28,9,-20,52,6,12,-127,-11,-118,6, 
  /* [16][0][][] */ -16,-36,-37,-42,-65,-85,-17,-66,64,-47,-63,-1,-18,-42,-8,-127, -64,49,-86,-84,-88,63,-43,-57,-88,10,-74,30,-84,-11,-10,-110, -15,22,-91,37,46,-57,-102,-107,-73,-116,-35,9,-56,5,-25,-4, 
  /* [17][0][][] */ -45,-60,1,-53,-100,-58,-92,-47,-68,-102,44,-16,4,-13,-51,-24, -14,-54,-80,-45,55,40,-18,-47,5,-34,40,62,43,16,36,-46, -46,-72,127,-23,-25,-58,-52,28,-16,-67,31,85,39,-6,-80,-89, 
  /* [18][0][][] */ 7,9,22,-89,6,56,64,53,-75,61,-4,-16,-65,27,-126,-10, -9,-23,44,3,-1,2,28,-127,18,33,7,34,68,14,26,53, -5,54,51,-7,47,28,23,50,43,36,57,8,2,13,-28,-30, 
  /* [19][0][][] */ 23,-31,11,64,17,-9,-56,-2,10,-14,-86,3,12,28,76,-66, 32,5,-22,-19,-32,7,16,-7,6,-65,-24,-12,59,-5,-26,81, -18,25,-39,-127,-38,21,84,-16,-31,66,31,6,-82,11,-97,-38, 
  /* [20][0][][] */ -25,18,-56,-8,39,-11,25,-38,39,-6,-6,-25,98,9,56,-29, 5,-12,28,-6,39,-1,-2,-48,-110,-93,23,-6,10,-14,-53,32, -4,50,60,-78,-29,6,36,68,-75,33,1,-53,-72,-30,-127,-29, 
  /* [21][0][][] */ -21,-8,-45,34,15,40,29,12,51,67,22,-29,56,-18,45,-20, 0,7,18,-23,22,-21,-18,-25,-31,1,2,4,-2,29,-56,27, 12,25,-4,-127,-21,-7,-1,31,-22,4,6,16,-103,-8,-104,11, 
  /* [22][0][][] */ -59,7,-3,-110,-46,-63,-7,-40,-43,39,-64,15,58,9,18,-28, 23,-64,-127,20,-41,-24,30,-32,40,-114,-37,74,-56,-56,-25,35, -4,46,-117,-111,-19,10,-127,-58,-7,-6,9,57,-62,-56,-92,-57, 
  /* [23][0][][] */ 27,-120,-15,6,-43,-16,15,2,15,-56,-24,-84,48,-46,-35,-28, 33,-38,-35,-127,1,13,-32,-43,-59,-37,-117,56,7,-46,-101,-40, 56,-12,-2,14,-93,-12,6,21,2,11,-68,-69,-67,-4,-9,-63, 
  /* [24][0][][] */ 41,32,-106,-14,-25,3,-48,0,127,-66,2,-22,84,-22,112,-45, -31,-31,34,-23,42,-34,19,-56,108,-3,-54,69,62,44,40,-13, -4,-51,31,44,11,-41,2,-11,76,6,-65,66,2,2,65,-3, 
  /* [25][0][][] */ 23,-27,-64,-78,-14,-22,-91,57,27,-32,-38,34,-115,40,-73,-31, -28,-63,38,-47,37,-14,-72,21,-61,-48,-68,42,-35,11,-127,21, -5,33,59,-36,18,18,-34,18,-32,-61,-10,6,-64,47,-60,40, 
  /* [26][0][][] */ -21,-25,2,28,-22,-7,-11,-52,24,-1,-20,9,-31,2,-4,-29, -11,29,-1,-15,-2,44,-46,-34,-15,61,-8,41,-52,-14,-7,15, 25,27,127,-19,-40,12,-30,-16,-27,-33,-10,-11,-45,18,-4,8, 
  /* [27][0][][] */ -13,-64,2,-42,-21,-33,-42,-32,-31,-40,51,-24,-47,-18,-22,-64, 10,-64,-22,-10,36,-31,-127,-10,55,76,-86,17,78,-4,37,-14, -12,-4,75,-12,23,-88,-46,-34,59,-88,19,-31,50,17,-9,14, 
  /* [28][0][][] */ 41,-8,-23,-51,-43,-65,-44,-67,101,-2,21,-23,-36,-14,-48,72, 41,-20,-90,-89,18,-45,26,70,31,-127,-3,-24,-74,-31,-5,-80, -14,-58,-5,-75,35,-73,-60,-14,-36,-22,-9,5,-21,37,-36,8, 
  /* [29][0][][] */ 39,13,-37,-84,-22,-59,45,-38,-31,-20,11,31,-82,-43,19,-93, 71,-107,16,-118,-21,-79,-38,-110,-127,-4,-79,40,-9,-57,-52,40, 66,-93,-2,-114,50,-16,-49,-83,-93,-31,50,90,-60,71,-100,-27, 
  /* [30][0][][] */ -4,14,-36,-63,-10,4,-1,57,-65,67,-27,-2,-7,14,-127,-50, 29,33,69,15,15,-28,-26,-10,56,-49,-13,-7,17,-30,13,80, -26,2,3,-37,-10,32,38,25,-20,71,37,21,-19,28,-22,4, 
  /* [31][0][][] */ -25,-38,-48,-6,16,-29,-10,-46,55,-37,-10,-12,64,-28,-63,-54, 33,30,83,-98,22,31,6,9,-72,87,-27,25,-96,-44,-127,39, -1,28,-8,41,48,29,36,53,39,78,8,28,38,7,41,-76, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant15_scale = { 32, { 0.0077456161379814148, 0.0048539550043642521, 0.010163441300392151, 0.0055009946227073669, 0.0058064935728907585, 0.0044250404462218285, 0.0050329309888184071, 0.0040585207752883434, 0.0063016950152814388, 0.0080448584631085396, 0.0070754634216427803, 0.0057640695013105869, 0.0057270871475338936, 0.0050377831794321537, 0.0045057265087962151, 0.0077423895709216595, 0.003208772512152791, 0.0036058102268725634, 0.0055607319809496403, 0.0055840061977505684, 0.0067367758601903915, 0.0085922060534358025, 0.0034842265304177999, 0.0023920526728034019, 0.0039984267204999924, 0.0047449651174247265, 0.0069069643504917622, 0.0061779497191309929, 0.0046675358898937702, 0.002870623953640461, 0.0067405318841338158, 0.0057148151099681854, } };
const TfArray<32, int> quant15_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int32_t tensor_data16[4] = { 1, 1, 100, 129, };
const TfArray<1, int> tensor_dimension16 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data17[3] = { 1, 100, 16, };
const TfArray<1, int> tensor_dimension17 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data18[4] = { 1, 100, 1, 16, };
const TfArray<1, int> tensor_dimension18 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data19[4] = { 1, 1, 50, 16, };
const TfArray<1, int> tensor_dimension19 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data20[3] = { 1, 50, 16, };
const TfArray<1, int> tensor_dimension20 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data21[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension21 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data22[4] = { 1, 1, 25, 16, };
const TfArray<1, int> tensor_dimension22 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data23[3] = { 1, 25, 16, };
const TfArray<1, int> tensor_dimension23 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data24[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension24 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data25[4] = { 1, 1, 13, 16, };
const TfArray<1, int> tensor_dimension25 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data26[3] = { 1, 13, 32, };
const TfArray<1, int> tensor_dimension26 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data27[4] = { 1, 13, 1, 32, };
const TfArray<1, int> tensor_dimension27 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,100,129 } };
const TfArray<1, float> quant28_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,100,16 } };
const TfArray<1, float> quant29_scale = { 1, { 0.13025745749473572, } };
const TfArray<1, int> quant29_zero = { 1, { 72 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<3, int> tensor_dimension30 = { 3, { 1,100,16 } };
const TfArray<1, float> quant30_scale = { 1, { 0.13025745749473572, } };
const TfArray<1, int> quant30_zero = { 1, { 72 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<3, int> tensor_dimension31 = { 3, { 1,100,16 } };
const TfArray<1, float> quant31_scale = { 1, { 0.027923304587602615, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<4, int> tensor_dimension32 = { 4, { 1,100,1,16 } };
const TfArray<1, float> quant32_scale = { 1, { 0.027923304587602615, } };
const TfArray<1, int> quant32_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<4, int> tensor_dimension33 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant33_scale = { 1, { 0.027923304587602615, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant34_scale = { 1, { 0.027923304587602615, } };
const TfArray<1, int> quant34_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<4, int> tensor_dimension35 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant35_scale = { 1, { 0.065370813012123108, } };
const TfArray<1, int> quant35_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<3, int> tensor_dimension36 = { 3, { 1,50,16 } };
const TfArray<1, float> quant36_scale = { 1, { 0.065370813012123108, } };
const TfArray<1, int> quant36_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<3, int> tensor_dimension37 = { 3, { 1,50,16 } };
const TfArray<1, float> quant37_scale = { 1, { 0.032240446656942368, } };
const TfArray<1, int> quant37_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant38_scale = { 1, { 0.032240446656942368, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<4, int> tensor_dimension39 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant39_scale = { 1, { 0.032240446656942368, } };
const TfArray<1, int> quant39_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const TfArray<4, int> tensor_dimension40 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant40_scale = { 1, { 0.032240446656942368, } };
const TfArray<1, int> quant40_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<4, int> tensor_dimension41 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant41_scale = { 1, { 0.1427551805973053, } };
const TfArray<1, int> quant41_zero = { 1, { 29 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const TfArray<3, int> tensor_dimension42 = { 3, { 1,25,16 } };
const TfArray<1, float> quant42_scale = { 1, { 0.1427551805973053, } };
const TfArray<1, int> quant42_zero = { 1, { 29 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const TfArray<3, int> tensor_dimension43 = { 3, { 1,25,16 } };
const TfArray<1, float> quant43_scale = { 1, { 0.054204907268285751, } };
const TfArray<1, int> quant43_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.054204907268285751, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.054204907268285751, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,1,13,16 } };
const TfArray<1, float> quant46_scale = { 1, { 0.054204907268285751, } };
const TfArray<1, int> quant46_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,1,13,32 } };
const TfArray<1, float> quant47_scale = { 1, { 0.37426424026489258, } };
const TfArray<1, int> quant47_zero = { 1, { 55 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<3, int> tensor_dimension48 = { 3, { 1,13,32 } };
const TfArray<1, float> quant48_scale = { 1, { 0.37426424026489258, } };
const TfArray<1, int> quant48_zero = { 1, { 55 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<3, int> tensor_dimension49 = { 3, { 1,13,32 } };
const TfArray<1, float> quant49_scale = { 1, { 0.10399044305086136, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,13,1,32 } };
const TfArray<1, float> quant50_scale = { 1, { 0.10399044305086136, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,7,1,32 } };
const TfArray<1, float> quant51_scale = { 1, { 0.10399044305086136, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<2, int> tensor_dimension52 = { 2, { 1,224 } };
const TfArray<1, float> quant52_scale = { 1, { 0.10399044305086136, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<2, int> tensor_dimension53 = { 2, { 1,64 } };
const TfArray<1, float> quant53_scale = { 1, { 0.41646254062652588, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<2, int> tensor_dimension54 = { 2, { 1,2 } };
const TfArray<1, float> quant54_scale = { 1, { 0.44901278614997864, } };
const TfArray<1, int> quant54_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<2, int> tensor_dimension55 = { 2, { 1,2 } };
const TfArray<1, float> quant55_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,16 } };
const TfArray<1, int> outputs0 = { 1, { 28 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 28,10,12 } };
const TfArray<1, int> outputs1 = { 1, { 29 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 29,17 } };
const TfArray<1, int> outputs2 = { 1, { 30 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 30,2 } };
const TfArray<1, int> outputs3 = { 1, { 31 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 31,18 } };
const TfArray<1, int> outputs4 = { 1, { 32 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 32 } };
const TfArray<1, int> outputs5 = { 1, { 33 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 33,19 } };
const TfArray<1, int> outputs6 = { 1, { 34 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 34,11,12 } };
const TfArray<1, int> outputs7 = { 1, { 35 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 35,20 } };
const TfArray<1, int> outputs8 = { 1, { 36 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 36,4 } };
const TfArray<1, int> outputs9 = { 1, { 37 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 37,21 } };
const TfArray<1, int> outputs10 = { 1, { 38 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 38 } };
const TfArray<1, int> outputs11 = { 1, { 39 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 39,22 } };
const TfArray<1, int> outputs12 = { 1, { 40 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 40,13,12 } };
const TfArray<1, int> outputs13 = { 1, { 41 } };
const TfLiteReshapeParams opdata14 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs14 = { 2, { 41,23 } };
const TfArray<1, int> outputs14 = { 1, { 42 } };
const TfLiteAddParams opdata15 = { kTfLiteActRelu };
const TfArray<2, int> inputs15 = { 2, { 42,5 } };
const TfArray<1, int> outputs15 = { 1, { 43 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 43,24 } };
const TfArray<1, int> outputs16 = { 1, { 44 } };
const TfLitePoolParams opdata17 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs17 = { 1, { 44 } };
const TfArray<1, int> outputs17 = { 1, { 45 } };
const TfLiteReshapeParams opdata18 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs18 = { 2, { 45,25 } };
const TfArray<1, int> outputs18 = { 1, { 46 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 46,15,14 } };
const TfArray<1, int> outputs19 = { 1, { 47 } };
const TfLiteReshapeParams opdata20 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs20 = { 2, { 47,26 } };
const TfArray<1, int> outputs20 = { 1, { 48 } };
const TfLiteAddParams opdata21 = { kTfLiteActRelu };
const TfArray<2, int> inputs21 = { 2, { 48,6 } };
const TfArray<1, int> outputs21 = { 1, { 49 } };
const TfLiteReshapeParams opdata22 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs22 = { 2, { 49,27 } };
const TfArray<1, int> outputs22 = { 1, { 50 } };
const TfLitePoolParams opdata23 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs23 = { 1, { 50 } };
const TfArray<1, int> outputs23 = { 1, { 51 } };
const TfLiteReshapeParams opdata24 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs24 = { 2, { 51,1 } };
const TfArray<1, int> outputs24 = { 1, { 52 } };
const TfLiteFullyConnectedParams opdata25 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs25 = { 3, { 52,8,7 } };
const TfArray<1, int> outputs25 = { 1, { 53 } };
const TfLiteFullyConnectedParams opdata26 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs26 = { 3, { 53,9,3 } };
const TfArray<1, int> outputs26 = { 1, { 54 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 54 } };
const TfArray<1, int> outputs27 = { 1, { 55 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 12912, (TfLiteIntArray*)&tensor_dimension0, 12900, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 14336, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 6192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 12900, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 12912, (TfLiteIntArray*)&tensor_dimension29, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension30, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension31, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension32, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1600, (TfLiteIntArray*)&tensor_dimension33, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension34, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension35, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension36, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension37, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension38, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension39, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension40, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension41, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension42, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension43, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension44, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension45, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension46, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension47, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension48, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension49, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension50, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension51, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension52, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension53, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension54, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_ADD, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_ADD, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 56;
  for(size_t i = 0; i < 56; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  55, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 28; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
